{"file":"orders-BwSckgWw.js","mappings":"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","names":[],"sources":["../../../../composables/usePageLoader.js","../../../../utils/api/orders.ts"],"sourcesContent":["import { ref, onMounted, watch, nextTick, readonly } from 'vue'\r\nimport { useRoute } from 'vue-router'\r\n\r\n// 全局缓存对象\r\nconst pageCache = new Map()\r\n\r\nexport const usePageLoader = (options = {}) => {\r\n  const {\r\n    // 最小加载时间（毫秒）\r\n    minLoadTime = 500,\r\n    // 自定义加载函数\r\n    loadFunction = null,\r\n    // 页面准备好的回调\r\n    onPageReady = null,\r\n    // 缓存键名\r\n    cacheKey = null,\r\n    // 是否启用缓存\r\n    enableCache = true\r\n  } = options\r\n\r\n  const route = useRoute()\r\n  \r\n  // 响应式状态\r\n  const isPageLoading = ref(true)\r\n  const isDataLoading = ref(true)\r\n  const isPageReady = ref(false)\r\n  const hasError = ref(false)\r\n  const errorMessage = ref('')\r\n\r\n  // 生成缓存键\r\n  const getCacheKey = () => {\r\n    return cacheKey || route.path\r\n  }\r\n\r\n  // 检查缓存\r\n  const checkCache = () => {\r\n    if (!enableCache) return null\r\n    \r\n    const key = getCacheKey()\r\n    return pageCache.get(key)\r\n  }\r\n\r\n  // 设置缓存\r\n  const setCache = (data) => {\r\n    if (!enableCache) return\r\n    \r\n    const key = getCacheKey()\r\n    pageCache.set(key, {\r\n      data,\r\n      timestamp: Date.now()\r\n    })\r\n  }\r\n\r\n  // 开始加载\r\n  const startLoading = async () => {\r\n    try {\r\n      // 检查缓存\r\n      const cached = checkCache()\r\n      if (cached) {\r\n        // 使用缓存数据，快速显示\r\n        isPageLoading.value = false\r\n        isDataLoading.value = false\r\n        isPageReady.value = true\r\n        hasError.value = false\r\n        errorMessage.value = ''\r\n        \r\n        if (onPageReady && typeof onPageReady === 'function') {\r\n          onPageReady(cached.data)\r\n        }\r\n        return cached.data\r\n      }\r\n\r\n      isPageLoading.value = true\r\n      isDataLoading.value = true\r\n      hasError.value = false\r\n      errorMessage.value = ''\r\n\r\n      let loadPromise = Promise.resolve()\r\n      let result = null\r\n      \r\n      // 如果有自定义加载函数，执行它\r\n      if (loadFunction && typeof loadFunction === 'function') {\r\n        loadPromise = loadFunction()\r\n      }\r\n      \r\n      // 确保最小加载时间和数据加载都完成\r\n      const [loadResult] = await Promise.all([\r\n        loadPromise,\r\n        new Promise(resolve => setTimeout(resolve, minLoadTime))\r\n      ])\r\n      \r\n      result = loadResult\r\n      \r\n      // 缓存结果\r\n      if (result) {\r\n        setCache(result)\r\n      }\r\n      \r\n      // 加载完成\r\n      isPageLoading.value = false\r\n      isDataLoading.value = false\r\n      isPageReady.value = true\r\n      \r\n      // 调用页面准备回调\r\n      if (onPageReady && typeof onPageReady === 'function') {\r\n        onPageReady(result)\r\n      }\r\n      \r\n      return result\r\n      \r\n    } catch (error) {\r\n      console.error('页面加载失败:', error)\r\n      hasError.value = true\r\n      errorMessage.value = error.message || '页面加载失败'\r\n      isPageLoading.value = false\r\n      isDataLoading.value = false\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 重新加载页面\r\n  const reloadPage = async () => {\r\n    // 清除缓存\r\n    const key = getCacheKey()\r\n    pageCache.delete(key)\r\n    \r\n    await startLoading()\r\n  }\r\n\r\n  // 设置加载状态\r\n  const setLoading = (loading) => {\r\n    isDataLoading.value = loading\r\n    isPageLoading.value = loading\r\n  }\r\n\r\n  // 设置错误状态\r\n  const setError = (error) => {\r\n    hasError.value = true\r\n    errorMessage.value = error\r\n    isPageLoading.value = false\r\n    isDataLoading.value = false\r\n  }\r\n\r\n  // 清除错误状态\r\n  const clearError = () => {\r\n    hasError.value = false\r\n    errorMessage.value = ''\r\n  }\r\n\r\n  // 清除缓存\r\n  const clearCache = () => {\r\n    const key = getCacheKey()\r\n    pageCache.delete(key)\r\n  }\r\n\r\n  // 监听路由变化，重置状态\r\n  watch(() => route.path, (newPath, oldPath) => {\r\n    // 路由变化时不自动重新加载，让组件的 onMounted 处理\r\n    // 这样可以避免重复加载和状态冲突\r\n    console.log('路由变化:', oldPath, '->', newPath)\r\n  })\r\n\r\n  // 生命周期钩子\r\n  onMounted(() => {\r\n    startLoading()\r\n  })\r\n\r\n  return {\r\n    // 状态\r\n    isPageLoading: readonly(isPageLoading),\r\n    isDataLoading: readonly(isDataLoading),\r\n    isPageReady: readonly(isPageReady),\r\n    hasError: readonly(hasError),\r\n    errorMessage: readonly(errorMessage),\r\n    \r\n    // 方法\r\n    startLoading,\r\n    reloadPage,\r\n    setLoading,\r\n    setError,\r\n    clearError,\r\n    clearCache\r\n  }\r\n}\r\n\r\n// 预定义的加载选项\r\nexport const pageLoaderPresets = {\r\n  // 快速加载（适用于静态页面）\r\n  fast: {\r\n    minLoadTime: 300,\r\n    enableCache: true\r\n  },\r\n  \r\n  // 标准加载（适用于大多数页面）\r\n  standard: {\r\n    minLoadTime: 500,\r\n    enableCache: true\r\n  },\r\n  \r\n  // 慢速加载（适用于数据密集型页面）\r\n  slow: {\r\n    minLoadTime: 800,\r\n    enableCache: true\r\n  },\r\n  \r\n  // 无缓存加载\r\n  noCache: {\r\n    minLoadTime: 500,\r\n    enableCache: false\r\n  }\r\n} ","import { apiClient } from '../apiClient'\r\nimport type { \r\n  Order, \r\n  OrderCreateInput,\r\n  OrderQueryParams,\r\n  ShippingAddress,\r\n  ApiResponse \r\n} from '../../types/api'\r\n\r\n// 支付方式类型\r\nexport interface PaymentData {\r\n  method: 'alipay' | 'wechat' | 'bank_card' | 'credit_card'\r\n  amount: number\r\n  orderId?: string\r\n}\r\n\r\n// 订单相关API\r\nexport const ordersApi = {\r\n  // 获取用户订单列表\r\n  getMyOrders: (params?: Omit<OrderQueryParams, 'user_id'>): Promise<ApiResponse<Order[]>> => \r\n    apiClient.getWithParams('/orders/my', params),\r\n\r\n  // 获取订单详情\r\n  getOrderById: (id: number): Promise<ApiResponse<Order>> => \r\n    apiClient.get(`/orders/${id}`),\r\n\r\n  // 根据订单号获取订单详情\r\n  getOrderByNo: (orderNo: string): Promise<ApiResponse<Order>> => \r\n    apiClient.get(`/orders/no/${orderNo}`),\r\n\r\n  // 创建订单\r\n  createOrder: (orderData: OrderCreateInput): Promise<ApiResponse<Order>> => \r\n    apiClient.post('/orders', orderData),\r\n\r\n  // 取消订单\r\n  cancelOrder: (id: number, reason?: string): Promise<ApiResponse<Order>> => \r\n    apiClient.patch(`/orders/${id}/cancel`, { reason }),\r\n\r\n  // 确认收货\r\n  confirmOrder: (id: number): Promise<ApiResponse<Order>> => \r\n    apiClient.patch(`/orders/${id}/confirm`),\r\n\r\n  // 申请退款\r\n  requestRefund: (id: number, reason: string): Promise<ApiResponse<Order>> => \r\n    apiClient.patch(`/orders/${id}/refund`, { reason }),\r\n\r\n  // 更新收货地址\r\n  updateShippingAddress: (id: number, address: ShippingAddress): Promise<ApiResponse<Order>> => \r\n    apiClient.patch(`/orders/${id}/address`, address),\r\n\r\n  // 添加订单备注\r\n  addOrderNote: (id: number, note: string): Promise<ApiResponse<Order>> => \r\n    apiClient.patch(`/orders/${id}/note`, { note }),\r\n\r\n  // 获取订单状态历史\r\n  getOrderHistory: (id: number): Promise<ApiResponse<{\r\n    id: number\r\n    orderId: number\r\n    status: string\r\n    note?: string\r\n    createdAt: string\r\n  }[]>> => \r\n    apiClient.get(`/orders/${id}/history`),\r\n\r\n  // 获取订单物流信息\r\n  getOrderTracking: (id: number): Promise<ApiResponse<{\r\n    trackingNo?: string\r\n    carrier?: string\r\n    status: string\r\n    updates: {\r\n      time: string\r\n      location: string\r\n      description: string\r\n    }[]\r\n  }>> => \r\n    apiClient.get(`/orders/${id}/tracking`),\r\n\r\n  // 创建支付订单\r\n  createPayment: (orderId: number, paymentData: PaymentData): Promise<ApiResponse<{\r\n    paymentId: string\r\n    paymentUrl?: string\r\n    qrCode?: string\r\n  }>> => \r\n    apiClient.post(`/orders/${orderId}/payment`, paymentData),\r\n\r\n  // 查询支付状态\r\n  getPaymentStatus: (orderId: number): Promise<ApiResponse<{\r\n    status: 'pending' | 'paid' | 'failed' | 'refunded'\r\n    paidAt?: string\r\n    amount: number\r\n    method: string\r\n  }>> => \r\n    apiClient.get(`/orders/${orderId}/payment-status`),\r\n\r\n  // 重新支付\r\n  retryPayment: (orderId: number, paymentData: PaymentData): Promise<ApiResponse<{\r\n    paymentId: string\r\n    paymentUrl?: string\r\n    qrCode?: string\r\n  }>> => \r\n    apiClient.post(`/orders/${orderId}/retry-payment`, paymentData),\r\n\r\n  // 商家订单管理\r\n  merchant: {\r\n    // 获取商家订单列表\r\n    getOrders: (params?: Omit<OrderQueryParams, 'merchant_id'>): Promise<ApiResponse<Order[]>> => \r\n      apiClient.getWithParams('/orders/merchant/my', params),\r\n\r\n    // 确认订单\r\n    confirmOrder: (orderId: number): Promise<ApiResponse<Order>> => \r\n      apiClient.patch(`/orders/merchant/${orderId}/confirm`),\r\n\r\n    // 发货\r\n    shipOrder: (orderId: number, trackingData: {\r\n      trackingNo: string\r\n      carrier: string\r\n      note?: string\r\n    }): Promise<ApiResponse<Order>> => \r\n      apiClient.patch(`/orders/merchant/${orderId}/ship`, trackingData),\r\n\r\n    // 拒绝订单\r\n    rejectOrder: (orderId: number, reason: string): Promise<ApiResponse<Order>> => \r\n      apiClient.patch(`/orders/merchant/${orderId}/reject`, { reason }),\r\n\r\n    // 处理退款\r\n    processRefund: (orderId: number, action: 'approve' | 'reject', reason?: string): Promise<ApiResponse<Order>> => \r\n      apiClient.patch(`/orders/merchant/${orderId}/refund`, { action, reason }),\r\n\r\n    // 更新订单备注\r\n    updateOrderRemark: (orderId: number, remark: string): Promise<ApiResponse<Order>> => \r\n      apiClient.patch(`/orders/merchant/${orderId}/remark`, { remark }),\r\n\r\n    // 获取商家订单统计\r\n    getStats: (): Promise<ApiResponse<{\r\n      total: number\r\n      pending: number\r\n      confirmed: number\r\n      shipped: number\r\n      delivered: number\r\n      cancelled: number\r\n      refunded: number\r\n      revenue: number\r\n      today_orders: number\r\n      today_revenue: number\r\n    }>> => \r\n      apiClient.get('/orders/merchant/stats')\r\n  },\r\n\r\n  // 管理员订单管理\r\n  admin: {\r\n    // 获取所有订单\r\n    getAllOrders: (params?: OrderQueryParams): Promise<ApiResponse<Order[]>> => \r\n      apiClient.getWithParams('/orders/admin', params),\r\n\r\n    // 强制取消订单\r\n    forceCancelOrder: (orderId: number, reason: string): Promise<ApiResponse<Order>> => \r\n      apiClient.patch(`/orders/admin/${orderId}/cancel`, { reason }),\r\n\r\n    // 强制退款\r\n    forceRefund: (orderId: number, reason: string): Promise<ApiResponse<Order>> => \r\n      apiClient.patch(`/orders/admin/${orderId}/refund`, { reason }),\r\n\r\n    // 获取系统订单统计\r\n    getSystemStats: (): Promise<ApiResponse<{\r\n      total: number\r\n      today: number\r\n      week: number\r\n      month: number\r\n      revenue: {\r\n        total: number\r\n        today: number\r\n        week: number\r\n        month: number\r\n      }\r\n      status_distribution: Record<string, number>\r\n      payment_methods: Record<string, number>\r\n    }>> => \r\n      apiClient.get('/orders/admin/stats'),\r\n\r\n    // 导出订单数据\r\n    exportOrders: (params?: {\r\n      start_date?: string\r\n      end_date?: string\r\n      status?: string\r\n      format?: 'csv' | 'xlsx'\r\n    }): Promise<ApiResponse<{ downloadUrl: string }>> => \r\n      apiClient.getWithParams('/orders/admin/export', params)\r\n  }\r\n}\r\n\r\nexport default ordersApi "],"version":3}