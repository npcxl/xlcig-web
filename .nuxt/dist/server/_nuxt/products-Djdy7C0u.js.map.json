{"file":"products-Djdy7C0u.js","mappings":";AASO,MAAM,cAAc;AAAA;AAAA,EAEzB,aAAa,CAAC,WACZ,UAAU,cAAc,YAAY,QAAQ,EAAE,aAAa,OAAO;AAAA;AAAA,EAGpE,gBAAgB,CAAC,QAAgB,OAC/B,UAAU,IAAI,yBAAyB,KAAK,IAAI,EAAE,aAAa,MAAA,CAAO;AAAA;AAAA,EAGxE,qBAAqB,CAAC,QAAgB,OACpC,UAAU,IAAI,2BAA2B,KAAK,IAAI,EAAE,aAAa,MAAA,CAAO;AAAA;AAAA,EAG1E,mBAAmB,CAAC,QAAgB,OAClC,UAAU,IAAI,yBAAyB,KAAK,IAAI,EAAE,aAAa,MAAA,CAAO;AAAA;AAAA,EAGxE,uBAAuB,CAAC,YAAoB,WAC1C,UAAU,cAAc,qBAAqB,UAAU,IAAI,QAAQ,EAAE,aAAa,OAAO;AAAA;AAAA,EAG3F,oBAAoB,CAAC,OAAe,WAClC,UAAU,cAAc,kBAAkB,mBAAmB,KAAK,CAAC,IAAI,QAAQ,EAAE,aAAa,OAAO;AAAA;AAAA,EAGvG,gBAAgB,CAAC,OACf,UAAU,IAAI,YAAY,EAAE,IAAI,EAAE,aAAa,MAAA,CAAO;AAAA;AAAA,EAGxD,kBAAkB,CAAC,SACjB,UAAU,IAAI,iBAAiB,IAAI,IAAI,EAAE,aAAa,MAAA,CAAO;AAAA;AAAA,EAG/D,gBAAgB,CAAC,OAAe,WAC9B,UAAU,cAAc,mBAAmB,EAAE,QAAQ,OAAO,GAAG,OAAA,GAAU,EAAE,aAAa,OAAO;AAAA;AAAA,EAGjG,iBAAiB,CAAC,eAChB,UAAU,KAAK,oBAAoB,EAAE,cAAc,EAAE,aAAa,OAAO;AAAA;AAAA,EAG3E,oBAAoB,CAAC,WAAmB,QAAgB,MACtD,UAAU,IAAI,YAAY,SAAS,kBAAkB,KAAK,IAAI,EAAE,aAAa,OAAO;AAAA;AAAA,EAGtF,iBAAiB,CAAC,WAAmB,OAAe,OAClD,UAAU,IAAI,YAAY,SAAS,uBAAuB,IAAI,IAAI,EAAE,aAAa,OAAO;AAAA;AAAA,EAG1F,WAAW,MACT,UAAU,IAAI,mBAAmB,EAAE,aAAa,OAAO;AAAA;AAAA,EAGzD,eAAe,CAAC,eACd,UAAU,cAAc,wBAAwB,aAAa,EAAE,aAAa,eAAe,QAAW,EAAE,aAAa,OAAO;AAAA;AAAA,EAG9H,eAAe,CAAC,gBACd,UAAU,KAAK,YAAY,WAAW;AAAA;AAAA,EAGxC,eAAe,CAAC,IAAY,gBAC1B,UAAU,IAAI,YAAY,EAAE,IAAI,WAAW;AAAA;AAAA,EAG7C,eAAe,CAAC,OACd,UAAU,OAAO,YAAY,EAAE,EAAE;AAAA;AAAA,EAGnC,qBAAqB,CAAC,QACpB,UAAU,KAAK,yBAAyB,EAAE,KAAK;AAAA;AAAA,EAGjD,qBAAqB,CAAC,IAAY,WAChC,UAAU,MAAM,YAAY,EAAE,WAAW,EAAE,OAAA,CAAQ;AAAA;AAAA,EAGrD,oBAAoB,CAAC,IAAY,UAC/B,UAAU,MAAM,YAAY,EAAE,UAAU,EAAE,MAAA,CAAO;AAAA;AAAA,EAGnD,qBAAqB,CAAC,WAAmB,UAAkD;AACzF,UAAM,WAAW,IAAI,SAAA;AACrB,UAAM,QAAQ,CAAA,SAAQ,SAAS,OAAO,UAAU,IAAI,CAAC;AACrD,WAAO,UAAU,OAAO,YAAY,SAAS,WAAW,QAAQ;AAAA,EAClE;AAAA;AAAA,EAGA,oBAAoB,CAAC,WAAmB,aACtC,UAAU,OAAO,YAAY,SAAS,oBAAoB,mBAAmB,QAAQ,CAAC,EAAE;AAAA;AAAA,EAG1F,iBAAiB,MAQf,UAAU,IAAI,gBAAgB;AAClC;","names":[],"sources":["../../../../utils/api/products.ts"],"sourcesContent":["import { apiClient } from '../apiClient'\r\nimport type { \r\n  Product, \r\n  ProductCreateInput,\r\n  ProductQueryParams,\r\n  ApiResponse \r\n} from '../../types/api'\r\n\r\n// 产品相关API\r\nexport const productsApi = {\r\n  // 获取产品列表\r\n  getProducts: (params?: ProductQueryParams): Promise<ApiResponse<Product[]>> => \r\n    apiClient.getWithParams('/product', params, { requireAuth: false }),\r\n\r\n  // 获取热门产品\r\n  getHotProducts: (limit: number = 10): Promise<ApiResponse<Product[]>> => \r\n    apiClient.get(`/product/getHot?limit=${limit}`, { requireAuth: false }),\r\n\r\n  // 获取推荐产品\r\n  getFeaturedProducts: (limit: number = 10): Promise<ApiResponse<Product[]>> => \r\n    apiClient.get(`/product/featured?limit=${limit}`, { requireAuth: false }),\r\n\r\n  // 获取最新产品\r\n  getLatestProducts: (limit: number = 10): Promise<ApiResponse<Product[]>> => \r\n    apiClient.get(`/product/latest?limit=${limit}`, { requireAuth: false }),\r\n\r\n  // 根据分类获取产品\r\n  getProductsByCategory: (categoryId: number, params?: Omit<ProductQueryParams, 'category_id'>): Promise<ApiResponse<Product[]>> => \r\n    apiClient.getWithParams(`/product/category/${categoryId}`, params, { requireAuth: false }),\r\n\r\n  // 根据品牌获取产品\r\n  getProductsByBrand: (brand: string, params?: Omit<ProductQueryParams, 'brand'>): Promise<ApiResponse<Product[]>> => \r\n    apiClient.getWithParams(`/product/brand/${encodeURIComponent(brand)}`, params, { requireAuth: false }),\r\n\r\n  // 根据ID获取产品详情\r\n  getProductById: (id: number): Promise<ApiResponse<Product>> => \r\n    apiClient.get(`/product/${id}`, { requireAuth: false }),\r\n\r\n  // 根据slug获取产品详情\r\n  getProductBySlug: (slug: string): Promise<ApiResponse<Product>> => \r\n    apiClient.get(`/product/slug/${slug}`, { requireAuth: false }),\r\n\r\n  // 搜索产品\r\n  searchProducts: (query: string, params?: Omit<ProductQueryParams, 'search'>): Promise<ApiResponse<Product[]>> => \r\n    apiClient.getWithParams('/product/search', { search: query, ...params }, { requireAuth: false }),\r\n\r\n  // 获取产品规格对比\r\n  compareProducts: (productIds: number[]): Promise<ApiResponse<Product[]>> => \r\n    apiClient.post('/product/compare', { productIds }, { requireAuth: false }),\r\n\r\n  // 获取相关产品\r\n  getRelatedProducts: (productId: number, limit: number = 8): Promise<ApiResponse<Product[]>> => \r\n    apiClient.get(`/product/${productId}/related?limit=${limit}`, { requireAuth: false }),\r\n\r\n  // 获取产品价格历史\r\n  getPriceHistory: (productId: number, days: number = 30): Promise<ApiResponse<{ date: string; price: number }[]>> => \r\n    apiClient.get(`/product/${productId}/price-history?days=${days}`, { requireAuth: false }),\r\n\r\n  // 获取所有品牌\r\n  getBrands: (): Promise<ApiResponse<string[]>> => \r\n    apiClient.get('/product/brands', { requireAuth: false }),\r\n\r\n  // 获取价格区间\r\n  getPriceRange: (categoryId?: number): Promise<ApiResponse<{ min: number; max: number }>> => \r\n    apiClient.getWithParams('/product/price-range', categoryId ? { category_id: categoryId } : undefined, { requireAuth: false }),\r\n\r\n  // 创建产品（商家功能）\r\n  createProduct: (productData: ProductCreateInput): Promise<ApiResponse<Product>> => \r\n    apiClient.post('/product', productData),\r\n\r\n  // 更新产品（商家功能）\r\n  updateProduct: (id: number, productData: Partial<ProductCreateInput>): Promise<ApiResponse<Product>> => \r\n    apiClient.put(`/product/${id}`, productData),\r\n\r\n  // 删除产品（商家功能）\r\n  deleteProduct: (id: number): Promise<ApiResponse<void>> => \r\n    apiClient.delete(`/product/${id}`),\r\n\r\n  // 批量删除产品（商家功能）\r\n  batchDeleteProducts: (ids: number[]): Promise<ApiResponse<void>> => \r\n    apiClient.post('/product/batch-delete', { ids }),\r\n\r\n  // 更新产品状态（商家功能）\r\n  updateProductStatus: (id: number, status: 'active' | 'inactive' | 'out_of_stock'): Promise<ApiResponse<Product>> => \r\n    apiClient.patch(`/product/${id}/status`, { status }),\r\n\r\n  // 更新产品库存（商家功能）\r\n  updateProductStock: (id: number, stock: number): Promise<ApiResponse<Product>> => \r\n    apiClient.patch(`/product/${id}/stock`, { stock }),\r\n\r\n  // 上传产品图片（商家功能）\r\n  uploadProductImages: (productId: number, files: File[]): Promise<ApiResponse<string[]>> => {\r\n    const formData = new FormData()\r\n    files.forEach(file => formData.append('images', file))\r\n    return apiClient.upload(`/product/${productId}/images`, formData)\r\n  },\r\n\r\n  // 删除产品图片（商家功能）\r\n  deleteProductImage: (productId: number, imageUrl: string): Promise<ApiResponse<void>> => \r\n    apiClient.delete(`/product/${productId}/images?imageUrl=${encodeURIComponent(imageUrl)}`),\r\n\r\n  // 获取产品统计信息（管理员功能）\r\n  getProductStats: (): Promise<ApiResponse<{ \r\n    total: number; \r\n    active: number; \r\n    inactive: number;\r\n    out_of_stock: number;\r\n    featured: number;\r\n    hot: number;\r\n  }>> => \r\n    apiClient.get('/product/stats')\r\n}\r\n\r\nexport default productsApi "],"version":3}