{"version":3,"file":"customer-service-D_HD71Gt.js","sources":["../../../../pages/customer-service.vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen bg-gradient-to-br from-gray-900 via-slate-900 to-black\">\n    <!-- 背景装饰 -->\n    <div class=\"fixed inset-0 pointer-events-none\">\n      <div\n        class=\"absolute top-20 left-20 w-96 h-96 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 rounded-full filter blur-3xl animate-pulse\">\n      </div>\n      <div\n        class=\"absolute bottom-20 right-20 w-80 h-80 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-full filter blur-3xl animate-pulse delay-1000\">\n      </div>\n    </div>\n\n    <!-- 导航栏 -->\n    <AppHeader :show-back-button=\"false\" :show-nav-menu=\"true\" :show-breadcrumb=\"true\" :show-location=\"false\"\n      :show-search-button=\"false\" :show-notification-button=\"true\" :show-decorations=\"false\" current-page-title=\"在线客服\"\n      logo-size=\"medium\" />\n\n    <!-- 页面头部 -->\n    <section class=\"relative z-10\">\n      <div class=\"container mx-auto px-6 py-8\">\n        <div\n          class=\"glass-card-dark rounded-2xl p-8 border border-cyan-500/30 shadow-2xl shadow-cyan-500/20 animate-fade-in-up\">\n          <div class=\"flex items-center justify-between\">\n            <div>\n              <h1 class=\"text-4xl font-bold text-white mb-3 flex items-center gap-3\">\n                <i class=\"bi bi-headset text-cyan-400 text-3xl animate-bounce-gentle\"></i>\n                在线客服\n              </h1>\n              <p class=\"text-gray-300 text-lg\">专业的客服团队随时为您提供帮助</p>\n            </div>\n            <!-- 服务状态和工具 -->\n            <div class=\"flex items-center gap-4\">\n              <!-- 服务状态 -->\n              <div class=\"flex items-center gap-6\">\n                <div class=\"flex items-center gap-2\">\n                  <div class=\"w-3 h-3 rounded-full animate-pulse\"\n                    :class=\"serviceStatus.adminOnline ? 'bg-green-500' : 'bg-red-500'\"></div>\n                  <span class=\"text-sm text-gray-300\">\n                    {{ serviceStatus.adminOnline ? '客服在线' : '暂无客服在线' }}\n                  </span>\n                </div>\n              </div>\n              <!-- 工具按钮 -->\n              <div class=\"flex items-center gap-2\">\n                <button v-if=\"unreadCount > 0\" @click=\"markAllMessagesAsRead\"\n                  class=\"px-4 py-2 text-sm font-medium bg-cyan-600 hover:bg-cyan-500 text-white rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 active:scale-95\">\n                  <i class=\"bi bi-check2-all\"></i>\n                  标记已读 ({{ unreadCount }})\n                </button>\n                <button @click=\"loadChatSessions\"\n                  class=\"px-4 py-2 text-sm font-medium border border-gray-600 hover:border-cyan-500 text-gray-300 hover:text-white rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 active:scale-95\">\n                  <i class=\"bi bi-arrow-clockwise\"></i>\n                  刷新\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n\n    <!-- 聊天工具栏 -->\n    <section class=\"relative z-10\">\n      <div class=\"container mx-auto px-6 py-4\">\n        <div\n          class=\"glass-card-dark rounded-2xl p-6 border border-cyan-500/30 shadow-2xl shadow-cyan-500/20 animate-fade-in-up\">\n          <div class=\"flex flex-wrap items-center justify-between gap-4\">\n            <div class=\"flex items-center gap-4\">\n              <div class=\"flex items-center gap-2\">\n                <i class=\"bi bi-chat-dots text-cyan-400\"></i>\n                <span class=\"text-white font-medium\">当前模式：</span>\n                <span class=\"text-cyan-300\">\n                  {{ selectedSession ? `与 ${selectedSession.user_nickname || selectedSession.user_name || '用户'} 对话` :\n                  '客服团队模式' }}\n                </span>\n              </div>\n              <div v-if=\"selectedSession\" class=\"flex items-center gap-2\">\n                <div class=\"w-2 h-2 rounded-full bg-green-500 animate-pulse\"></div>\n                <span class=\"text-sm text-gray-400\">用户对话中</span>\n              </div>\n            </div>\n            <div class=\"flex items-center gap-2\">\n              <div class=\"flex items-center gap-2 text-sm text-gray-400\">\n                <i class=\"bi bi-people\"></i>\n                <span>会话: {{ sessions.length }}</span>\n              </div>\n              <div class=\"flex items-center gap-2 text-sm text-gray-400\">\n                <i class=\"bi bi-chat-left-dots\"></i>\n                <span>消息: {{ messages.length }}</span>\n              </div>\n              <div class=\"flex items-center gap-2\">\n                <div class=\"w-2 h-2 rounded-full animate-pulse\" :class=\"isConnected ? 'bg-green-500' : 'bg-red-500'\">\n                </div>\n                <span class=\"text-xs text-gray-400\">{{ isConnected ? '已连接' : '连接中...' }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n\n    <!-- 主要内容区 -->\n    <main class=\"container mx-auto px-6 py-8 relative z-10\">\n      <!-- 聊天主体 -->\n      <div class=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n        <!-- 会话列表 -->\n        <div class=\"xl:col-span-1\">\n          <div\n            class=\"glass-card-dark rounded-2xl border border-cyan-500/30 shadow-2xl shadow-cyan-500/20 overflow-hidden animate-fade-in-left h-[750px] flex flex-col\">\n            <!-- 会话列表头部 -->\n            <div class=\"px-6 py-4 border-b border-gray-700/50 bg-gray-800/30\">\n              <div class=\"flex items-center justify-between\">\n                <div>\n                  <h3 class=\"text-lg font-semibold text-white mb-1 flex items-center gap-2\">\n                    <i class=\"bi bi-chat-left-text text-cyan-400\"></i>\n                    对话列表\n                  </h3>\n                  <p class=\"text-xs text-gray-400\">\n                    {{ sessions.length }} 个会话\n                    <span v-if=\"selectedSession\" class=\"text-cyan-400 ml-2\">\n                      · 已选中 {{ selectedSession.user_nickname || selectedSession.user_name || `用户\n                      #${selectedSession.user_id}` }}\n                    </span>\n                  </p>\n                </div>\n                <div class=\"flex items-center gap-2\">\n                  <!-- 返回客服模式按钮 -->\n                  <button v-if=\"selectedSession\" @click=\"backToCustomerService\"\n                    class=\"p-2 text-gray-400 hover:text-cyan-300 hover:bg-gray-700/50 rounded-lg transition-all duration-300 hover:scale-110 active:scale-95\"\n                    title=\"返回客服模式\">\n                    <i class=\"bi bi-arrow-left text-lg\"></i>\n                  </button>\n                  <!-- 刷新按钮 -->\n                  <button @click=\"loadChatSessions\"\n                    class=\"p-2 text-gray-400 hover:text-cyan-300 hover:bg-gray-700/50 rounded-lg transition-all duration-300 hover:scale-110 active:scale-95\"\n                    title=\"刷新列表\">\n                    <i class=\"bi bi-arrow-clockwise text-lg\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <!-- 会话列表内容 -->\n            <div class=\"flex-1 overflow-y-auto\">\n              <div v-if=\"sessions.length === 0\"\n                class=\"flex flex-col items-center justify-center h-full text-center p-8\">\n                <div\n                  class=\"w-20 h-20 bg-gradient-to-br from-gray-700/50 to-gray-800/50 rounded-full flex items-center justify-center mb-6\">\n                  <i class=\"bi bi-chat-dots text-3xl text-gray-500\"></i>\n                </div>\n                <h4 class=\"text-xl font-semibold text-white mb-3\">暂无对话</h4>\n                <p class=\"text-gray-400 text-sm leading-relaxed\">等待用户开始对话<br>或从客服团队模式开始</p>\n              </div>\n\n              <div v-else class=\"p-4 space-y-3\">\n                <div v-for=\"(session, index) in sessions\" :key=\"session.id\" @click=\"selectSession(session)\"\n                  class=\"relative p-4 rounded-xl cursor-pointer transition-all duration-300 group hover:scale-[1.01] animate-fade-in-up border border-transparent hover:border-gray-600/50\"\n                  :class=\"[\n                    selectedSession?.id === session.id\n                      ? 'session-selected border-cyan-500/50'\n                      : 'hover:bg-gray-800/30'\n                  ]\" :style=\"{ animationDelay: `${index * 50}ms` }\">\n                  <!-- 选中状态指示器 -->\n                  <div v-if=\"selectedSession?.id === session.id\"\n                    class=\"absolute top-3 left-3 w-3 h-3 bg-cyan-400 rounded-full animate-pulse shadow-lg\"></div>\n                  <!-- 未读消息指示器 -->\n                  <div v-if=\"session.unread_count > 0\"\n                    class=\"absolute top-3 right-3 min-w-[20px] h-5 bg-red-500 rounded-full flex items-center justify-center px-1\">\n                    <span class=\"text-xs text-white font-semibold\">{{ session.unread_count > 99 ? '99+' :\n                      session.unread_count }}</span>\n                  </div>\n\n                  <!-- 用户信息 -->\n                  <div class=\"flex items-center space-x-4\">\n                    <!-- 用户头像 -->\n                    <div class=\"relative flex-shrink-0\">\n                      <div class=\"w-14 h-14 rounded-xl overflow-hidden border-2 transition-all duration-300 shadow-lg\"\n                        :class=\"selectedSession?.id === session.id ? 'border-cyan-400/70 shadow-cyan-400/20' : 'border-gray-700/50'\">\n                        <img v-if=\"session.user_avatar\" :src=\"session.user_avatar\" :alt=\"session.user_nickname || '用户'\"\n                          class=\"w-full h-full object-cover\" @error=\"$event.target.style.display = 'none'\" />\n                        <div v-else\n                          class=\"w-full h-full bg-gradient-to-br from-gray-600 to-gray-700 flex items-center justify-center\">\n                          <i class=\"bi bi-person text-white text-xl\"></i>\n                        </div>\n                      </div>\n                      <!-- 在线状态指示器 -->\n                      <div\n                        class=\"absolute -bottom-1 -right-1 w-5 h-5 bg-gray-800 rounded-full flex items-center justify-center border border-gray-700\">\n                        <div class=\"w-3 h-3 rounded-full\" \n                             :class=\"session.isOnline ? 'bg-green-500 animate-pulse' : 'bg-gray-500'\"></div>\n                      </div>\n                    </div>\n\n                    <!-- 会话信息 -->\n                    <div class=\"flex-1 min-w-0\">\n                      <div class=\"flex items-center justify-between mb-2\">\n                        <h4 class=\"text-white font-semibold text-base truncate\">\n                          {{ session.user_nickname || session.user_name || `用户 #${session.user_id}` }}\n                        </h4>\n                        <span class=\"text-xs text-gray-500 flex-shrink-0 ml-2\">\n                          {{ formatTime(session.last_message_time || session.started_at) }}\n                        </span>\n                      </div>\n\n                      <!-- 最后消息 -->\n                      <div class=\"mb-2\">\n                        <p class=\"text-sm text-gray-400 truncate leading-relaxed\">\n                          {{ session.last_message || '等待开始对话...' }}\n                        </p>\n                      </div>\n\n                      <!-- 状态信息 -->\n                      <div class=\"flex items-center justify-between\">\n                        <div class=\"flex items-center space-x-2\">\n                          <span class=\"text-xs px-2 py-1 rounded-lg font-medium\"\n                            :class=\"getSessionStatusClass(session.status)\">\n                            {{ getSessionStatusText(session.status) }}\n                          </span>\n                          <!-- 评分 -->\n                          <div v-if=\"session.rating\" class=\"flex items-center\">\n                            <div class=\"flex mr-1\">\n                              <i v-for=\"i in 5\" :key=\"i\"\n                                :class=\"i <= session.rating ? 'text-yellow-400' : 'text-gray-600'\"\n                                class=\"bi bi-star-fill text-xs\"></i>\n                            </div>\n                            <span class=\"text-xs text-gray-500\">{{ session.rating }}.0</span>\n                          </div>\n                        </div>\n\n                        <!-- 在线状态 -->\n                        <div class=\"flex items-center gap-1\">\n                          <div class=\"w-2 h-2 rounded-full\" \n                               :class=\"session.isOnline ? 'bg-green-500 animate-pulse' : 'bg-gray-500'\"></div>\n                          <span class=\"text-xs\" \n                                :class=\"session.isOnline ? 'text-green-400' : 'text-gray-400'\">\n                            {{ session.isOnline ? '在线' : '离线' }}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- 主聊天区域 -->\n        <div class=\"xl:col-span-3\">\n          <div\n            class=\"glass-card-dark rounded-2xl border border-cyan-500/30 shadow-2xl shadow-cyan-500/20 overflow-hidden animate-fade-in-right h-[750px] flex flex-col\">\n            <!-- 聊天头部 -->\n            <div class=\"px-6 py-4 border-b border-gray-700/50 bg-gray-800/30\">\n              <div class=\"flex items-center justify-between\">\n                <div class=\"flex items-center gap-4\">\n                  <!-- 聊天对象头像 -->\n                  <div\n                    class=\"w-12 h-12 rounded-xl flex items-center justify-center overflow-hidden border-2 shadow-lg transition-all duration-300\"\n                    :class=\"currentChatUser.isCustomerService ? 'border-cyan-500/50' : 'border-gray-600/50'\">\n                    <img v-if=\"currentChatUser.avatar\" :src=\"currentChatUser.avatar\" :alt=\"currentChatUser.name\"\n                      class=\"w-full h-full object-cover\" @error=\"handleAvatarError\" />\n                    <div v-else class=\"w-full h-full flex items-center justify-center animate-pulse-gentle\" :class=\"currentChatUser.isCustomerService\n                      ? 'bg-gradient-to-r from-cyan-500 to-blue-500'\n                      : 'bg-gradient-to-r from-gray-500 to-gray-600'\">\n                      <i class=\"text-white text-xl\"\n                        :class=\"currentChatUser.isCustomerService ? 'bi bi-headset' : 'bi bi-person'\"></i>\n                    </div>\n                  </div>\n                  <div>\n                    <h3 class=\"text-xl font-semibold text-white flex items-center gap-2\">\n                      {{ currentChatUser.name }}\n                      <i v-if=\"currentChatUser.isCustomerService\"\n                        class=\"bi bi-patch-check-fill text-cyan-400 text-lg\"></i>\n                    </h3>\n                    <p class=\"text-sm text-gray-400 flex items-center gap-2\">\n                    <div class=\"w-2 h-2 rounded-full\"\n                      :class=\"currentChatUser.isCustomerService \n                        ? (isConnected ? 'bg-green-500 animate-pulse' : 'bg-gray-500')\n                        : (currentChatUser.isOnline ? 'bg-green-500 animate-pulse' : 'bg-gray-500')\">\n                    </div>\n                    {{ currentChatUser.status }}\n                    </p>\n                  </div>\n                </div>\n                <div class=\"flex items-center gap-3\">\n                  <!-- 连接状态 -->\n                  <div class=\"flex items-center gap-2 px-3 py-1 rounded-lg bg-gray-700/30\">\n                    <div class=\"w-2 h-2 rounded-full animate-pulse\"\n                      :class=\"isConnected ? 'bg-green-500' : 'bg-red-500'\"></div>\n                    <span class=\"text-xs text-gray-400 font-medium\">{{ isConnected ? '已连接' : '连接中...' }}</span>\n                  </div>\n                  <!-- 功能按钮 -->\n                  <div class=\"flex items-center gap-1\">\n                    <button\n                      class=\"p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-lg transition-all duration-300 hover:scale-110 active:scale-95\"\n                      title=\"语音通话\">\n                      <i class=\"bi bi-telephone text-lg\"></i>\n                    </button>\n                    <button\n                      class=\"p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-lg transition-all duration-300 hover:scale-110 active:scale-95\"\n                      title=\"更多选项\">\n                      <i class=\"bi bi-three-dots text-lg\"></i>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- 聊天消息区域 -->\n            <div class=\"flex-1 overflow-y-auto p-6\" ref=\"messagesContainer\">\n              <!-- 欢迎消息 -->\n              <div v-if=\"messages.length === 0\" class=\"text-center py-16\">\n                <div\n                  class=\"w-24 h-24 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-2xl\">\n                  <i class=\"bi bi-chat-heart text-4xl text-cyan-400\"></i>\n                </div>\n                <h3 class=\"text-2xl font-bold text-white mb-3\">\n                  {{ selectedSession ? `与 ${selectedSession.user_nickname || selectedSession.user_name || `用户\n                  #${selectedSession.user_id}`} 的对话` : '欢迎使用在线客服' }}\n                </h3>\n                <p class=\"text-gray-400 mb-8 text-lg leading-relaxed max-w-md mx-auto\">\n                  {{ selectedSession ? '您正在与该用户进行私人对话，可以实时交流解决问题' : '有任何问题都可以在这里与我们沟通，您也可以从左侧选择特定用户进行对话' }}\n                </p>\n                <div class=\"flex flex-wrap justify-center gap-3 max-w-2xl mx-auto\">\n                  <button v-for=\"(quickMsg, index) in quickMessages\" :key=\"quickMsg\" @click=\"sendQuickMessage(quickMsg)\"\n                    class=\"px-6 py-3 bg-cyan-500/20 border border-cyan-400/30 text-cyan-300 rounded-xl text-sm font-medium hover:bg-cyan-500/30 hover:border-cyan-400/50 transition-all duration-300 hover:scale-105 active:scale-95 animate-fade-in-up shadow-lg hover:shadow-cyan-400/20\"\n                    :style=\"{ animationDelay: `${index * 100}ms` }\">\n                    {{ quickMsg }}\n                  </button>\n                </div>\n              </div>\n\n              <!-- 系统提示 -->\n              <div v-if=\"!serviceStatus.adminOnline && messages.length > 0\" class=\"mb-6 animate-fade-in-up\">\n                <div\n                  class=\"bg-yellow-500/10 border border-yellow-400/30 rounded-lg p-4 text-center transition-all duration-300 hover:bg-yellow-500/15 hover:border-yellow-400/50\">\n                  <i class=\"bi bi-info-circle text-yellow-400 mr-2 animate-pulse\"></i>\n                  <span class=\"text-yellow-300 text-sm\">当前暂无客服在线，您可以留言，我们会尽快回复您。</span>\n                </div>\n              </div>\n\n              <!-- 聊天消息列表 -->\n              <div class=\"space-y-4\">\n                <TransitionGroup name=\"message\" tag=\"div\" class=\"space-y-4\">\n                  <div v-for=\"message in messages\" :key=\"message.id || message.timestamp\" class=\"flex\"\n                    :class=\"isCurrentUserMessage(message) ? 'justify-end' : 'justify-start'\">\n\n                    <!-- 其他人的消息 (左边) - 包括客服 -->\n                    <div v-if=\"!isCurrentUserMessage(message)\" class=\"flex items-start gap-3 max-w-[70%]\">\n                      <!-- 发送者头像 -->\n                      <div\n                        class=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden border border-gray-600/30\">\n                        <img v-if=\"getMessageAvatar(message)\" :src=\"getMessageAvatar(message)\"\n                          :alt=\"getMessageNickname(message)\" class=\"w-full h-full object-cover\"\n                          @error=\"handleAvatarError\" @load=\"handleAvatarLoad\" />\n                        <div v-else class=\"w-full h-full rounded-full flex items-center justify-center\"\n                          :class=\"isCustomerServiceMessage(message) ? 'bg-gradient-to-r from-green-500 to-emerald-500' : 'bg-gradient-to-r from-gray-500 to-gray-600'\">\n                          <i class=\"text-white text-sm\"\n                            :class=\"isCustomerServiceMessage(message) ? 'bi bi-person-badge' : 'bi bi-person'\"></i>\n                        </div>\n                      </div>\n                      <div>\n                        <div class=\"bg-gray-700/50 border border-gray-600/30 rounded-2xl rounded-tl-sm p-3 text-white\">\n                          {{ message.message || message.data?.message }}\n                        </div>\n                        <div class=\"flex items-center gap-2 mt-1 ml-1\">\n                          <span class=\"text-xs\"\n                            :class=\"isCustomerServiceMessage(message) ? 'text-green-400' : 'text-gray-400'\">\n                            {{ message.nickname || message.data?.nickname || (isCustomerServiceMessage(message) ? '客服' :\n                            '用户') }}\n                          </span>\n                          <span class=\"text-xs text-gray-500\">{{ formatTime(message.timestamp || message.created_at)\n                            }}</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <!-- 当前用户消息 (右边) -->\n                    <div v-else class=\"flex items-start gap-3 max-w-[70%] flex-row-reverse\">\n                      <!-- 用户头像 -->\n                      <div\n                        class=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden border border-cyan-500/30\">\n                        <img v-if=\"getUserAvatar(message)\" :src=\"getUserAvatar(message)\" :alt=\"getUserNickname(message)\"\n                          class=\"w-full h-full object-cover\" @error=\"handleAvatarError\" @load=\"handleAvatarLoad\" />\n                        <div v-else\n                          class=\"w-full h-full bg-gradient-to-r from-cyan-600 to-blue-600 rounded-full flex items-center justify-center\">\n                          <i class=\"bi bi-person text-white text-sm\"></i>\n                        </div>\n                      </div>\n                      <div class=\"text-right\">\n                        <div\n                          class=\"bg-gradient-to-r from-cyan-600 to-blue-600 rounded-2xl rounded-tr-sm p-3 text-white\">\n                          {{ message.message || message.data?.message }}\n                        </div>\n                        <div class=\"flex items-center gap-2 mt-1 justify-end mr-1\">\n                          <span class=\"text-xs text-gray-500\">{{ formatTime(message.timestamp || message.created_at)\n                            }}</span>\n                          <span class=\"text-xs text-cyan-400\">\n                            {{ getUserNickname(message) }}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                </TransitionGroup>\n\n                <!-- 正在输入提示 -->\n                <div v-if=\"isTyping && typingUsers.size > 0\" class=\"flex justify-start mt-4\">\n                  <div v-for=\"[userId, userInfo] in typingUsers\" :key=\"userId\" class=\"flex items-start gap-3 max-w-[70%] animate-fade-in-up mb-2\">\n                    <!-- 用户头像 -->\n                    <div class=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden border border-gray-600/30\">\n                      <img \n                        v-if=\"userInfo.avatar\" \n                        :src=\"userInfo.avatar\" \n                        :alt=\"userInfo.nickname\"\n                        class=\"w-full h-full object-cover\"\n                        @error=\"$event.target.style.display = 'none'\"\n                      />\n                      <div \n                        v-else\n                        class=\"w-full h-full bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center animate-pulse-gentle\">\n                        <i class=\"bi bi-person-badge text-white text-sm\"></i>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <div class=\"bg-gray-700/50 border border-gray-600/30 rounded-2xl rounded-tl-sm p-3\">\n                        <div class=\"flex gap-1\">\n                          <div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                          <div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 0.1s\"></div>\n                          <div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 0.2s\"></div>\n                        </div>\n                      </div>\n                      <div class=\"flex items-center gap-2 mt-1 ml-1\">\n                        <span class=\"text-xs text-green-400\">{{ userInfo.nickname }}</span>\n                        <span class=\"text-xs text-gray-500\">正在输入...</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- 聊天输入区域 -->\n            <div class=\"px-6 py-4 border-t border-gray-700/50 bg-gray-800/20\">\n              <!-- 工具按钮组 -->\n              <div class=\"flex items-center justify-between mb-3\">\n                <div class=\"flex items-center gap-2\">\n                  <button\n                    class=\"p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-lg transition-all duration-300 hover:scale-110 active:scale-95\"\n                    title=\"附件\">\n                    <i class=\"bi bi-paperclip text-lg\"></i>\n                  </button>\n                  <button\n                    class=\"p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-lg transition-all duration-300 hover:scale-110 active:scale-95\"\n                    title=\"表情\">\n                    <i class=\"bi bi-emoji-smile text-lg\"></i>\n                  </button>\n                </div>\n                \n                <!-- 输入提示工具栏 -->\n                <div class=\"flex items-center gap-3\">\n                  <span class=\"text-xs text-gray-500 flex items-center gap-1\">\n                    <i class=\"bi bi-keyboard\"></i>\n                    Enter 发送，Shift+Enter 换行\n                  </span>\n                  <div v-if=\"newMessage.length > 0\" class=\"text-xs text-gray-500\">\n                    {{ newMessage.length }} 字符\n                  </div>\n                  <button v-if=\"unreadCount > 0\" @click=\"markAllMessagesAsRead\"\n                    class=\"text-xs text-cyan-400 hover:text-cyan-300 transition-all duration-300 hover:scale-105 active:scale-95 px-3 py-1 rounded-lg hover:bg-cyan-500/10 border border-cyan-500/20\">\n                    <i class=\"bi bi-check2-all mr-1\"></i>\n                    标记已读 ({{ unreadCount }})\n                  </button>\n                </div>\n              </div>\n\n              <!-- 输入框和发送按钮 -->\n              <div class=\"flex items-end gap-3\">\n                <!-- 输入框区域 -->\n                <div class=\"flex-1 relative\">\n                  <textarea v-model=\"newMessage\" @keydown.enter.exact.prevent=\"sendMessage\"\n                    @input=\"adjustTextareaHeight\" @focus=\"handleInputFocus\" @blur=\"handleInputBlur\"\n                    :disabled=\"!isConnected\" placeholder=\"输入您的消息... (Enter 发送，Shift+Enter 换行)\" rows=\"1\"\n                    class=\"w-full px-4 py-3 bg-gray-800/50 border border-gray-600/50 rounded-xl focus:ring-2 focus:ring-cyan-500 focus:border-cyan-400 text-white placeholder-gray-400 transition-all duration-300 resize-none hover:border-cyan-500/50 focus:scale-[1.01] min-h-[48px] max-h-32 hide-scrollbar\"></textarea>\n                  <!-- 输入状态指示 -->\n                  <div v-if=\"isInputFocused\"\n                    class=\"absolute -top-6 left-2 text-xs text-cyan-400 bg-gray-800/80 px-2 py-1 rounded-lg\">\n                    正在输入...\n                  </div>\n                </div>\n\n                <!-- 发送按钮 -->\n                <button @click=\"sendMessage\" :disabled=\"!newMessage.trim() || !isConnected\"\n                  class=\"px-6 py-3 bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 disabled:from-gray-600 disabled:to-gray-700 text-white font-semibold rounded-xl transition-all duration-300 shadow-lg shadow-cyan-500/20 hover:shadow-cyan-500/40 disabled:shadow-none flex items-center gap-2 hover:scale-105 active:scale-95 min-h-[48px] flex-shrink-0\">\n                  <i class=\"bi bi-send text-lg\"></i>\n                  <span class=\"hidden sm:inline\">发送</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n    </main>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted, nextTick, watch } from 'vue'\nimport { useUserStore } from '~/stores/user'\nimport { ChatApi } from '~/utils/api/chat'\n\n// 状态管理\nconst userStore = useUserStore()\nconst isConnected = ref(false)\nconst isTyping = ref(false)\nconst typingUsers = ref(new Map()) // 存储正在输入的用户，格式：userId -> { nickname, avatar, timestamp }\nconst unreadCount = ref(0)\nconst newMessage = ref('')\nconst messages = ref([])\nconst sessions = ref([])\nconst messagesContainer = ref()\nconst selectedSession = ref(null) // 当前选中的会话\n\n// 服务状态\nconst serviceStatus = ref({\n  adminOnline: false,\n  adminCount: 0,\n  totalUsers: 0,\n  normalUserCount: 0\n})\n\n// WebSocket连接\nlet websocket = null\nlet heartbeatTimer = null\n\n// 快速消息\nconst quickMessages = [\n  '你好，请问有什么可以帮助您的？',\n  '我想了解产品信息',\n  '订单相关问题',\n  '技术支持'\n]\n\n// 计算属性\nconst isLoggedIn = computed(() => userStore.isLoggedIn)\n\n// 当前聊天对象信息\nconst currentChatUser = computed(() => {\n  if (!selectedSession.value) {\n    return {\n      name: 'xlCig 客服团队',\n      avatar: null,\n      status: serviceStatus.value.adminOnline ? '在线 - 平均响应时间 < 1分钟' : '离线 - 我们会尽快回复您的消息',\n      isCustomerService: true\n    }\n  }\n\n  return {\n    name: selectedSession.value.displayName || selectedSession.value.user_nickname || selectedSession.value.user_name || `用户 #${selectedSession.value.user_id}`,\n    avatar: selectedSession.value.avatar || selectedSession.value.user_avatar,\n    status: selectedSession.value.isOnline ? '在线 - 用户对话' : '离线 - 用户对话',\n    isCustomerService: false,\n    isOnline: selectedSession.value.isOnline,\n    userId: selectedSession.value.user_id,\n    sessionId: selectedSession.value.id\n  }\n})\n\n// 页面元数据\nuseHead({\n  title: '在线客服 - xlCig',\n  meta: [\n    { name: 'description', content: '专业的在线客服服务，为您提供实时帮助和支持' }\n  ]\n})\n\n// WebSocket连接\nconst connectWebSocket = () => {\n  if (!isLoggedIn.value || !userStore.token) {\n    console.error('用户未登录，无法连接WebSocket')\n    return\n  }\n\n  try {\n    const wsUrl = `ws://192.168.11.194:9999/websocket?token=${userStore.token}`\n    console.log('正在连接WebSocket:', wsUrl)\n\n    websocket = new WebSocket(wsUrl)\n\n    websocket.onopen = () => {\n      console.log('WebSocket连接成功')\n      isConnected.value = true\n      startHeartbeat()\n      \n      // 连接成功后，请求获取当前所有用户的在线状态\n      setTimeout(() => {\n        if (websocket && websocket.readyState === WebSocket.OPEN) {\n          websocket.send(JSON.stringify({ \n            type: 'get_users_status',\n            data: {}\n          }))\n          console.log('已请求获取用户在线状态')\n        }\n      }, 1000)\n    }\n\n    websocket.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data)\n        handleWebSocketMessage(message)\n      } catch (error) {\n        console.error('解析WebSocket消息失败:', error)\n      }\n    }\n\n    websocket.onclose = () => {\n      console.log('WebSocket连接关闭')\n      isConnected.value = false\n      stopHeartbeat()\n\n      // 自动重连\n      setTimeout(() => {\n        console.log('尝试重新连接WebSocket...')\n        connectWebSocket()\n      }, 3000)\n    }\n\n    websocket.onerror = (error) => {\n      console.error('WebSocket连接错误:', error)\n      isConnected.value = false\n    }\n\n  } catch (error) {\n    console.error('创建WebSocket连接失败:', error)\n  }\n}\n\nconst disconnectWebSocket = () => {\n  if (websocket) {\n    websocket.close()\n    websocket = null\n  }\n  stopHeartbeat()\n  isConnected.value = false\n}\n\n// 心跳机制\nconst startHeartbeat = () => {\n  heartbeatTimer = setInterval(() => {\n    if (websocket && websocket.readyState === WebSocket.OPEN) {\n      websocket.send(JSON.stringify({ type: 'ping' }))\n    }\n  }, 30000)\n}\n\nconst stopHeartbeat = () => {\n  if (heartbeatTimer) {\n    clearInterval(heartbeatTimer)\n    heartbeatTimer = null\n  }\n}\n\n// 处理WebSocket消息\nconst handleWebSocketMessage = (message) => {\n  console.log('收到WebSocket消息:', message)\n\n  switch (message.type) {\n    case 'user_info':\n      console.log('用户信息:', message.data)\n      unreadCount.value = message.data.unreadCount || 0\n      if (message.data.stats) {\n        serviceStatus.value = message.data.stats\n      }\n      break\n\n    case 'message':\n      // 确保包含头像和昵称信息，并正确识别消息类型\n      const isCustomerServiceMsg = message.isAdmin || message.data?.isAdmin || message.data?.isCustomerService || message.data?.role === 'admin' || message.data?.role === 'customer_service'\n\n      const messageWithUserInfo = {\n        ...message,\n        user_id: message.user_id || message.data?.user_id || message.data?.userId,\n        avatar: message.avatar || message.data?.avatar,\n        nickname: message.nickname || message.data?.nickname || message.data?.userName,\n        userName: message.userName || message.data?.userName,\n        // 检查是否为客服消息\n        isAdmin: isCustomerServiceMsg,\n        message_type: message.message_type || (isCustomerServiceMsg ? 'customer_service' : 'user'),\n        // 对于客服消息，添加发送者ID信息\n        ...(isCustomerServiceMsg && {\n          senderId: message.data?.userId || message.userId || message.data?.senderId,\n          data: {\n            ...message.data,\n            userId: message.data?.userId || message.userId,\n            senderId: message.data?.senderId || message.data?.userId\n          }\n        })\n      }\n\n      console.log('处理后的消息:', messageWithUserInfo)\n\n      // 如果选中了特定用户，只显示该用户相关的消息\n      if (selectedSession.value) {\n        const messageUserId = messageWithUserInfo.user_id || messageWithUserInfo.data?.targetUserId\n        if (messageUserId === selectedSession.value.user_id) {\n          messages.value.push(messageWithUserInfo)\n          scrollToBottom()\n        } else {\n          console.log('消息不属于当前选中用户，不显示:', messageUserId, '当前用户:', selectedSession.value.user_id)\n        }\n      } else {\n        // 未选中特定用户，显示所有消息（默认客服模式）\n        messages.value.push(messageWithUserInfo)\n        scrollToBottom()\n      }\n\n      // 当收到新消息时自动标记为已读\n      nextTick(() => {\n        autoMarkAsRead()\n      })\n\n      // 更新会话列表中的未读数量和最后消息\n      if (messageWithUserInfo.user_id) {\n        updateSessionList(messageWithUserInfo)\n      }\n      break\n\n    case 'typing':\n      console.log('收到输入状态消息:', message.data)\n      handleTypingMessage(message.data, true)\n      break\n\n    case 'stop_typing':\n      console.log('收到停止输入消息:', message.data)\n      handleTypingMessage(message.data, false)\n      break\n\n    case 'message_read':\n      unreadCount.value = message.data.unreadCount || 0\n      break\n\n    case 'user_online':\n      console.log('用户上线:', message.data)\n      updateUserOnlineStatus(message.data.userId || message.data.user_id, true, message.data)\n      break\n\n    case 'user_offline':\n      console.log('用户下线:', message.data)\n      updateUserOnlineStatus(message.data.userId || message.data.user_id, false, message.data)\n      break\n\n    case 'user_status_update':\n      console.log('用户状态更新:', message.data)\n      if (message.data && (message.data.userId || message.data.user_id)) {\n        const isOnline = message.data.isOnline !== undefined ? message.data.isOnline : true\n        updateUserOnlineStatus(message.data.userId || message.data.user_id, isOnline, message.data)\n      }\n      break\n\n    case 'users_status_response':\n      console.log('收到用户状态列表:', message.data)\n      if (message.data && Array.isArray(message.data.users)) {\n        message.data.users.forEach(user => {\n          updateUserOnlineStatus(user.userId || user.user_id, user.isOnline, user)\n        })\n      }\n      break\n\n    case 'error':\n      console.error('WebSocket错误:', message.data)\n      break\n  }\n}\n\n// 清除所有typing状态\nconst clearTypingStates = () => {\n  typingUsers.value.clear()\n  isTyping.value = false\n  console.log('已清除所有typing状态')\n}\n\n// 处理输入状态消息\nconst handleTypingMessage = (data, isTyping) => {\n  const userId = data.userId || data.user_id || data.senderId\n  const targetUserId = data.targetUserId || data.target_user_id\n  \n  console.log('处理输入状态:', { userId, targetUserId, isTyping, currentSession: selectedSession.value?.user_id })\n  \n  // 如果是在特定用户对话模式下\n  if (selectedSession.value) {\n    // 只有当前选中用户或者目标用户是当前选中用户时，才显示typing状态\n    const isCurrentSessionUser = userId === selectedSession.value.user_id || targetUserId === selectedSession.value.user_id\n    \n    if (isCurrentSessionUser) {\n      if (isTyping) {\n        // 添加/更新正在输入的用户\n        typingUsers.value.set(userId, {\n          nickname: data.nickname || data.userName || '用户',\n          avatar: data.avatar,\n          timestamp: Date.now()\n        })\n        isTyping.value = true\n        console.log(`用户 ${userId} 开始输入`)\n      } else {\n        // 移除正在输入的用户\n        typingUsers.value.delete(userId)\n        isTyping.value = typingUsers.value.size > 0\n        console.log(`用户 ${userId} 停止输入`)\n      }\n    }\n  } else {\n    // 客服团队模式下，显示所有输入状态\n    if (isTyping) {\n      typingUsers.value.set(userId, {\n        nickname: data.nickname || data.userName || '用户',\n        avatar: data.avatar,\n        timestamp: Date.now()\n      })\n      isTyping.value = true\n      console.log(`用户 ${userId} 开始输入（团队模式）`)\n    } else {\n      typingUsers.value.delete(userId)\n      isTyping.value = typingUsers.value.size > 0\n      console.log(`用户 ${userId} 停止输入（团队模式）`)\n    }\n  }\n}\n\n// 更新用户在线状态\nconst updateUserOnlineStatus = (userId, isOnline, userData = {}) => {\n  if (!userId) return\n  \n  console.log(`更新用户 ${userId} 在线状态:`, isOnline, userData)\n  \n  // 更新会话列表中的用户状态\n  const sessionIndex = sessions.value.findIndex(session => session.user_id === userId)\n  if (sessionIndex >= 0) {\n    const session = sessions.value[sessionIndex]\n    const previousStatus = session.isOnline\n    \n    // 更新在线状态\n    session.isOnline = isOnline\n    \n    // 如果有新的用户数据，更新相关信息\n    if (userData.userName && userData.userName !== session.user_name) {\n      session.user_name = userData.userName\n      session.displayName = userData.userName\n    }\n    if (userData.nickname && userData.nickname !== session.user_nickname) {\n      session.user_nickname = userData.nickname\n      session.displayName = userData.nickname\n    }\n    if (userData.avatar && userData.avatar !== session.avatar) {\n      session.avatar = userData.avatar\n      session.user_avatar = userData.avatar\n    }\n    \n    // 状态变化提示\n    if (previousStatus !== isOnline) {\n      const userName = session.displayName || session.user_nickname || session.user_name || `用户 #${userId}`\n      console.log(`📱 ${userName} ${isOnline ? '🟢 上线了' : '🔴 下线了'}`)\n      \n      // 可以在这里添加Toast提示或其他视觉反馈\n      // 例如：showToast(`${userName} ${isOnline ? '上线了' : '下线了'}`)\n    }\n    \n    console.log(`会话列表中用户 ${userId} 状态已更新:`, session)\n  } else {\n    // 如果会话列表中没有这个用户，且用户上线了，可以考虑重新加载会话列表\n    if (isOnline) {\n      console.log(`新用户 ${userId} 上线，重新加载会话列表`)\n      loadChatSessions()\n    }\n  }\n  \n  // 如果当前选中的用户状态发生变化，触发计算属性更新\n  if (selectedSession.value && selectedSession.value.user_id === userId) {\n    selectedSession.value.isOnline = isOnline\n    \n    // 更新选中用户的其他信息\n    if (userData.userName) selectedSession.value.user_name = userData.userName\n    if (userData.nickname) selectedSession.value.user_nickname = userData.nickname\n    if (userData.avatar) {\n      selectedSession.value.avatar = userData.avatar\n      selectedSession.value.user_avatar = userData.avatar\n    }\n    \n    console.log(`当前选中用户 ${userId} 状态已更新`, selectedSession.value)\n  }\n}\n\n// 自动调整textarea高度\nconst adjustTextareaHeight = (event) => {\n  const textarea = event.target\n  textarea.style.height = 'auto'\n  textarea.style.height = Math.min(textarea.scrollHeight, 128) + 'px' // 最大高度128px\n}\n\n// 发送消息\nconst sendMessage = async () => {\n  if (!newMessage.value.trim()) {\n    return\n  }\n\n  const messageText = newMessage.value.trim()\n\n  try {\n    if (selectedSession.value) {\n      // 选中了特定用户，使用API发送消息\n      console.log('向用户发送消息:', selectedSession.value.user_id, messageText)\n      const response = await ChatApi.sendMessage(messageText, selectedSession.value.user_id)\n\n      if (response.success) {\n        // 添加消息到本地显示（客服发送的消息）\n        const adminMessage = {\n          id: Date.now(),\n          user_id: selectedSession.value.user_id, // 消息归属于目标用户（数据库存储）\n          senderId: userStore.user?.id, // 发送者ID（用于UI判断）\n          message: messageText,\n          message_type: 'customer_service',\n          isAdmin: true,\n          avatar: userStore.user?.avatar,\n          nickname: userStore.userDisplayName,\n          userName: userStore.userDisplayName,\n          timestamp: Date.now(),\n          created_at: new Date().toISOString(),\n          data: {\n            userId: userStore.user?.id, // 确保data中也有发送者ID\n            userName: userStore.userDisplayName,\n            isAdmin: true\n          }\n        }\n\n        messages.value.push(adminMessage)\n        console.log('消息发送成功，已添加到本地显示')\n      }\n    } else {\n      // 默认客服模式，通过WebSocket发送\n      if (!isConnected.value || !websocket) {\n        console.error('WebSocket未连接')\n        return\n      }\n\n      const message = {\n        type: 'message',\n        data: {\n          message: messageText,\n          user_id: userStore.user?.id,\n          userId: userStore.user?.id\n        }\n      }\n\n      websocket.send(JSON.stringify(message))\n\n      // 添加到本地消息列表\n      const userAvatar = userStore.user?.avatar\n      messages.value.push({\n        ...message,\n        data: {\n          ...message.data,\n          userId: userStore.user?.id,\n          userName: userStore.userDisplayName,\n          isAdmin: false,\n          avatar: userAvatar\n        },\n        user_id: userStore.user?.id,\n        timestamp: Date.now(),\n        isAdmin: false,\n        message_type: 'user',\n        avatar: userAvatar,\n        nickname: userStore.user?.nickname || userStore.userDisplayName,\n        userName: userStore.userDisplayName\n      })\n    }\n\n    newMessage.value = ''\n\n    // 重置textarea高度\n    nextTick(() => {\n      const textarea = document.querySelector('textarea')\n      if (textarea) {\n        textarea.style.height = '48px'\n      }\n    })\n\n    scrollToBottom()\n\n    // 发送消息后停止输入状态\n    sendStopTyping()\n\n  } catch (error) {\n    console.error('发送消息失败:', error)\n  }\n}\n\n// 发送快速消息\nconst sendQuickMessage = (message) => {\n  newMessage.value = message\n  sendMessage()\n}\n\n// 输入框焦点状态管理\nconst isInputFocused = ref(false)\n\n// 处理输入框获得焦点\nconst handleInputFocus = () => {\n  console.log('输入框获得焦点')\n  isInputFocused.value = true\n\n  // 发送正在输入状态（节流发送）\n  if (!isConnected.value || !websocket) return\n\n  try {\n    websocket.send(JSON.stringify({\n      type: 'typing',\n      data: {\n        userId: userStore.user?.id,\n        userName: userStore.userDisplayName,\n        nickname: userStore.user?.nickname || userStore.userDisplayName,\n        avatar: userStore.user?.avatar,\n        targetUserId: selectedSession.value?.user_id,\n        chatMode: selectedSession.value ? 'user_conversation' : 'customer_service',\n        isAdmin: userStore.user?.role === 'admin',\n        isCustomerService: userStore.user?.role === 'admin' || userStore.user?.role === 'customer_service'\n      }\n    }))\n  } catch (error) {\n    console.error('发送输入状态失败:', error)\n  }\n}\n\n// 处理输入框失去焦点\nconst handleInputBlur = () => {\n  console.log('输入框失去焦点')\n  isInputFocused.value = false\n\n  // 延迟发送停止输入状态，避免快速焦点切换导致的闪烁\n  setTimeout(() => {\n    if (!isInputFocused.value) {\n      sendStopTyping()\n    }\n  }, 500)\n}\n\nconst sendStopTyping = () => {\n  if (!isConnected.value || !websocket) return\n\n  try {\n    websocket.send(JSON.stringify({\n      type: 'stop_typing',\n      data: {\n        userId: userStore.user?.id,\n        userName: userStore.userDisplayName,\n        nickname: userStore.user?.nickname || userStore.userDisplayName,\n        avatar: userStore.user?.avatar,\n        targetUserId: selectedSession.value?.user_id,\n        chatMode: selectedSession.value ? 'user_conversation' : 'customer_service',\n        isAdmin: userStore.user?.role === 'admin',\n        isCustomerService: userStore.user?.role === 'admin' || userStore.user?.role === 'customer_service'\n      }\n    }))\n  } catch (error) {\n    console.error('发送停止输入状态失败:', error)\n  }\n}\n\n// 加载数据\nconst loadChatHistory = async () => {\n  try {\n    const response = await ChatApi.getChatHistory({ limit: 50 })\n    if (response.success && response.data) {\n      messages.value = response.data.map(msg => {\n        console.log('历史消息:', msg)\n\n        // 判断是否为客服消息的逻辑\n        const isCustomerService = msg.message_type === 'customer_service' ||\n          msg.role === 'admin' ||\n          msg.role === 'customer_service'\n\n        const processedMsg = {\n          ...msg,\n          user_id: msg.user_id || msg.id, // 确保有user_id\n          isAdmin: isCustomerService,\n          avatar: msg.avatar || msg.user_avatar, // 优先使用消息头像，再使用用户头像\n          nickname: msg.nickname || msg.user_nickname || msg.username,\n          userName: msg.nickname || msg.user_nickname || msg.username,\n          message_type: isCustomerService ? 'customer_service' : 'user'\n        }\n\n        console.log('处理后的历史消息:', processedMsg, {\n          isCustomerService,\n          userId: msg.user_id,\n          currentUserId: userStore.user?.id,\n          isCurrentUser: msg.user_id === userStore.user?.id\n        })\n\n        return processedMsg\n      })\n      console.log('所有处理后的历史消息:', messages.value)\n      scrollToBottom()\n    }\n  } catch (error) {\n    console.error('加载聊天历史失败:', error)\n  }\n}\n\nconst loadChatSessions = async () => {\n  try {\n    const response = await ChatApi.getUserSessions({ limit: 20 })\n    if (response.success && response.data) {\n      sessions.value = response.data.map(session => {\n        console.log('原始用户会话数据:', session)\n        const processedSession = {\n          ...session,\n          id: session.user_id, // 使用user_id作为会话ID\n          user_avatar: session.avatar,\n          user_nickname: session.nickname,\n          user_name: session.nickname || session.username,\n          unread_count: session.unread_count || 0,\n          last_message: session.last_message,\n          last_message_time: session.last_message_time,\n          last_message_type: session.last_message_type,\n          isOnline: session.isOnline || false, // 在线状态\n          displayName: session.displayName || session.nickname || session.username, // 显示名称\n          status: 'active' // 默认状态\n        }\n        console.log('处理后的用户会话数据:', processedSession)\n        return processedSession\n      })\n    }\n  } catch (error) {\n    console.error('加载用户会话列表失败:', error)\n  }\n}\n\nconst loadServiceStatus = async () => {\n  try {\n    const response = await ChatApi.getServiceStatus()\n    if (response.success) {\n      serviceStatus.value = response.data\n    }\n  } catch (error) {\n    console.error('获取服务状态失败:', error)\n  }\n}\n\nconst loadUnreadCount = async () => {\n  try {\n    const response = await ChatApi.getUnreadCount()\n    if (response.success) {\n      unreadCount.value = response.data.unreadCount\n    }\n  } catch (error) {\n    console.error('获取未读消息数量失败:', error)\n  }\n}\n\n// 标记所有消息为已读\nconst markAllMessagesAsRead = async () => {\n  try {\n    const response = await ChatApi.markMessagesAsRead()\n    if (response.success) {\n      unreadCount.value = response.data.unreadCount\n    }\n  } catch (error) {\n    console.error('标记消息已读失败:', error)\n  }\n}\n\n// 工具函数\nconst scrollToBottom = () => {\n  nextTick(() => {\n    if (messagesContainer.value) {\n      messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight\n    }\n  })\n}\n\n// 判断是否为当前用户的消息\nconst isCurrentUserMessage = (message) => {\n  const currentUserId = userStore.user?.id\n\n  // 如果是客服消息类型，检查是否是当前管理员发送的\n  if (message.message_type === 'customer_service' || message.isAdmin) {\n    // 检查发送者信息，优先使用 senderId 或 data.userId\n    const senderId = message.senderId || message.data?.userId || message.data?.senderId\n    if (senderId) {\n      return senderId === currentUserId\n    }\n\n    // 如果没有明确的发送者ID，检查昵称/用户名是否匹配\n    const senderName = message.nickname || message.userName || message.data?.userName\n    const currentUserName = userStore.userDisplayName\n    if (senderName && currentUserName) {\n      return senderName === currentUserName\n    }\n  }\n\n  // 对于普通用户消息，使用 user_id 判断\n  const messageUserId = message.user_id || message.data?.user_id || message.data?.userId\n  return messageUserId === currentUserId\n}\n\n// 判断是否为客服消息（仅用于显示客服标识，不影响位置）\nconst isCustomerServiceMessage = (message) => {\n  // 多重检查确保正确识别客服消息\n  return message.isAdmin === true ||\n    message.message_type === 'customer_service' ||\n    message.data?.isAdmin === true ||\n    message.data?.isCustomerService === true ||\n    message.data?.role === 'admin' ||\n    message.data?.role === 'customer_service'\n}\n\nconst formatTime = (timestamp) => {\n  if (!timestamp) return ''\n\n  const date = new Date(timestamp)\n  const now = new Date()\n  const diffInMs = now - date\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60))\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60))\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24))\n\n  // 如果是今天\n  if (diffInDays === 0) {\n    if (diffInMinutes < 1) {\n      return '刚刚'\n    } else if (diffInMinutes < 60) {\n      return `${diffInMinutes}分钟前`\n    } else {\n      return date.toLocaleTimeString('zh-CN', {\n        hour12: false,\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n    }\n  }\n  // 如果是昨天\n  else if (diffInDays === 1) {\n    return `昨天 ${date.toLocaleTimeString('zh-CN', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit'\n    })}`\n  }\n  // 如果是更早\n  else if (diffInDays < 7) {\n    const weekdays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\n    return `${weekdays[date.getDay()]} ${date.toLocaleTimeString('zh-CN', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit'\n    })}`\n  }\n  // 超过一周\n  else {\n    return date.toLocaleDateString('zh-CN', {\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  }\n}\n\nconst formatDate = (dateString) => {\n  if (!dateString) return ''\n\n  const date = new Date(dateString)\n  const now = new Date()\n  const diffInMs = now - date\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24))\n\n  if (diffInDays === 0) {\n    return date.toLocaleTimeString('zh-CN', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  } else if (diffInDays === 1) {\n    return '昨天'\n  } else if (diffInDays < 7) {\n    const weekdays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\n    return weekdays[date.getDay()]\n  } else {\n    return date.toLocaleDateString('zh-CN', {\n      month: '2-digit',\n      day: '2-digit'\n    })\n  }\n}\n\nconst getSessionStatusClass = (status) => {\n  switch (status) {\n    case 'active':\n      return 'bg-green-500/20 text-green-400 border-green-500/30'\n    case 'waiting':\n      return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30'\n    case 'closed':\n      return 'bg-gray-500/20 text-gray-400 border-gray-500/30'\n    default:\n      return 'bg-gray-500/20 text-gray-400 border-gray-500/30'\n  }\n}\n\nconst getSessionStatusText = (status) => {\n  switch (status) {\n    case 'active':\n      return '进行中'\n    case 'waiting':\n      return '等待中'\n    case 'closed':\n      return '已结束'\n    default:\n      return '未知'\n  }\n}\n\nconst getMessageAvatar = (message) => {\n  // 获取发送者头像，优先级：message.avatar > message.data.avatar\n  const avatar = message.avatar || message.data?.avatar\n  // 过滤掉空字符串和无效URL\n  if (avatar && avatar.trim() && avatar !== 'null' && avatar !== 'undefined') {\n    return avatar.trim()\n  }\n  return null\n}\n\nconst getMessageNickname = (message) => {\n  return message.nickname || message.data?.nickname || message.userName || message.data?.userName || '用户'\n}\n\nconst getUserAvatar = (message) => {\n  // 获取当前用户头像\n  const avatar = message.avatar || message.data?.avatar || userStore.user?.avatar\n  // 过滤掉空字符串和无效URL\n  if (avatar && avatar.trim() && avatar !== 'null' && avatar !== 'undefined') {\n    return avatar.trim()\n  }\n  return null\n}\n\nconst getUserNickname = (message) => {\n  return message.nickname || message.data?.nickname || message.userName || message.data?.userName || userStore.userDisplayName\n}\n\n// 头像错误处理\nconst handleAvatarError = (event) => {\n  console.log('头像加载失败:', event.target.src)\n  event.target.style.display = 'none'\n}\n\n// 头像加载成功处理\nconst handleAvatarLoad = (event) => {\n  console.log('头像加载成功:', event.target.src)\n}\n\n// 自动标记消息为已读\nconst autoMarkAsRead = async () => {\n  if (unreadCount.value > 0) {\n    try {\n      const response = await ChatApi.markMessagesAsRead()\n      if (response.success) {\n        unreadCount.value = 0\n        console.log('消息已自动标记为已读')\n      }\n    } catch (error) {\n      console.error('自动标记消息已读失败:', error)\n    }\n  }\n}\n\n// 选择会话\nconst selectSession = async (session) => {\n  console.log('选中用户会话:', session)\n  \n  // 清除之前的typing状态\n  clearTypingStates()\n  \n  selectedSession.value = session\n\n  // 加载该用户的聊天记录\n  await loadChatHistoryForSession(session.user_id)\n\n  // 标记该用户的消息为已读\n  if (session.unread_count > 0) {\n    await markSessionAsRead(session.user_id)\n    // 更新会话列表中的未读数量\n    session.unread_count = 0\n  }\n}\n\n// 加载特定会话的聊天记录\nconst loadChatHistoryForSession = async (sessionId) => {\n  try {\n    console.log('加载用户聊天记录:', sessionId)\n    // 使用新的 getUserMessages 接口\n    const response = await ChatApi.getUserMessages(sessionId, {\n      limit: 50\n    })\n\n    if (response.success && response.data) {\n      messages.value = response.data.map(msg => {\n        console.log('用户消息:', msg)\n\n        // 判断是否为客服消息的逻辑\n        const isCustomerService = msg.message_type === 'customer_service' ||\n          msg.role === 'admin' ||\n          msg.role === 'customer_service' ||\n          msg.is_admin_message === 1\n\n        const processedMsg = {\n          ...msg,\n          user_id: msg.user_id || msg.id,\n          isAdmin: isCustomerService,\n          avatar: msg.avatar,\n          nickname: msg.nickname || msg.username,\n          userName: msg.nickname || msg.username,\n          message_type: isCustomerService ? 'customer_service' : 'user'\n        }\n\n        return processedMsg\n      })\n\n      console.log('用户聊天记录加载完成:', messages.value)\n      scrollToBottom()\n    }\n  } catch (error) {\n    console.error('加载用户聊天记录失败:', error)\n    // 如果API不支持按用户加载，回退到加载全部记录\n    await loadChatHistory()\n  }\n}\n\n// 标记特定会话为已读\nconst markSessionAsRead = async (sessionId) => {\n  try {\n    const response = await ChatApi.markSessionAsRead(sessionId)\n    if (response.success) {\n      console.log('会话已标记为已读:', sessionId)\n      // 更新总的未读数量\n      await loadUnreadCount()\n    }\n  } catch (error) {\n    console.error('标记会话已读失败:', error)\n    // 如果API不支持，使用通用的标记已读\n    await autoMarkAsRead()\n  }\n}\n\n// 返回客服模式\nconst backToCustomerService = () => {\n  console.log('返回客服模式')\n  \n  // 清除typing状态\n  clearTypingStates()\n  \n  selectedSession.value = null\n  // 重新加载默认的聊天记录\n  loadChatHistory()\n}\n\n// 更新会话列表\nconst updateSessionList = (message) => {\n  const messageUserId = message.user_id\n  const sessionIndex = sessions.value.findIndex(s => s.user_id === messageUserId)\n\n  if (sessionIndex >= 0) {\n    // 更新现有会话\n    const session = sessions.value[sessionIndex]\n    session.last_message = message.message || message.data?.message\n    session.last_message_time = new Date().toISOString()\n\n    // 如果不是当前选中的会话且消息类型是用户消息，增加未读数量\n    if ((!selectedSession.value || selectedSession.value.user_id !== messageUserId) &&\n      message.message_type === 'user') {\n      session.unread_count = (session.unread_count || 0) + 1\n    }\n\n    // 将会话移到列表顶部\n    sessions.value.splice(sessionIndex, 1)\n    sessions.value.unshift(session)\n  } else if (message.message_type === 'user') {\n    // 新用户发送消息，重新加载会话列表\n    loadChatSessions()\n  }\n}\n\n// 检查登录状态和初始化\nonMounted(async () => {\n  if (!userStore.isLoggedIn) {\n    // 如果未登录，跳转到登录页面\n    navigateTo('/auth/login')\n    return\n  }\n\n  // 加载页面数据\n  await Promise.all([\n    loadServiceStatus(),\n    loadUnreadCount(),\n    loadChatHistory(),\n    loadChatSessions()\n  ])\n  connectWebSocket()\n})\n\nonUnmounted(() => {\n  disconnectWebSocket()\n})\n</script>\n\n<style scoped>\n.glass-card-dark {\n  background: rgba(31, 41, 55, 0.8);\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n}\n\n/* 滚动条样式 */\n.overflow-y-auto::-webkit-scrollbar {\n  width: 6px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-track {\n  background: rgba(55, 65, 81, 0.3);\n  border-radius: 3px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb {\n  background: rgba(156, 163, 175, 0.5);\n  border-radius: 3px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb:hover {\n  background: rgba(156, 163, 175, 0.7);\n}\n\n/* 隐藏输入框滚动条 */\n.hide-scrollbar {\n  /* 隐藏 Webkit 浏览器滚动条 */\n  -webkit-overflow-scrolling: touch;\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none; /* IE 和 Edge */\n}\n\n.hide-scrollbar::-webkit-scrollbar {\n  display: none; /* Chrome, Safari, Opera */\n}\n\n/* 自定义动画 */\n@keyframes fadeInUp {\n  0% {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes fadeInLeft {\n  0% {\n    opacity: 0;\n    transform: translateX(-30px);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes fadeInRight {\n  0% {\n    opacity: 0;\n    transform: translateX(30px);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes bounceGentle {\n\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n\n  40% {\n    transform: translateY(-3px);\n  }\n\n  60% {\n    transform: translateY(-2px);\n  }\n}\n\n@keyframes pulseGentle {\n\n  0%,\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n\n  50% {\n    transform: scale(1.05);\n    opacity: 0.8;\n  }\n}\n\n@keyframes bounce {\n\n  0%,\n  20%,\n  53%,\n  80%,\n  100% {\n    transform: translate3d(0, 0, 0);\n  }\n\n  40%,\n  43% {\n    transform: translate3d(0, -8px, 0);\n  }\n\n  70% {\n    transform: translate3d(0, -4px, 0);\n  }\n\n  90% {\n    transform: translate3d(0, -2px, 0);\n  }\n}\n\n/* 动画类 */\n.animate-fade-in-up {\n  animation: fadeInUp 0.8s ease-out forwards;\n}\n\n.animate-fade-in-left {\n  animation: fadeInLeft 0.8s ease-out forwards;\n  animation-delay: 0.2s;\n  opacity: 0;\n}\n\n.animate-fade-in-right {\n  animation: fadeInRight 0.8s ease-out forwards;\n  animation-delay: 0.3s;\n  opacity: 0;\n}\n\n.animate-bounce-gentle {\n  animation: bounceGentle 2s ease-in-out infinite;\n}\n\n.animate-pulse-gentle {\n  animation: pulseGentle 2s ease-in-out infinite;\n}\n\n.animate-bounce {\n  animation: bounce 1s infinite;\n}\n\n/* 消息动画 */\n.message-enter-active {\n  transition: all 0.5s ease-out;\n}\n\n.message-enter-from {\n  opacity: 0;\n  transform: translateY(20px) scale(0.9);\n}\n\n.message-enter-to {\n  opacity: 1;\n  transform: translateY(0) scale(1);\n}\n\n/* 会话选中状态优化 */\n.session-selected {\n  background: linear-gradient(135deg, rgba(6, 182, 212, 0.15) 0%, rgba(59, 130, 246, 0.15) 100%);\n  border: 1px solid rgba(6, 182, 212, 0.4);\n  box-shadow: 0 0 20px rgba(6, 182, 212, 0.2);\n}\n\n.session-selected::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  border-radius: 12px;\n  background: linear-gradient(135deg, rgba(6, 182, 212, 0.1) 0%, rgba(59, 130, 246, 0.1) 100%);\n  pointer-events: none;\n  z-index: -1;\n}\n\n/* 响应式设计优化 */\n@media (max-width: 1280px) {\n\n  .xl\\\\:col-span-1,\n  .xl\\\\:col-span-3 {\n    grid-column: span 1;\n  }\n\n  .grid.xl\\\\:grid-cols-4 {\n    grid-template-columns: repeat(1, minmax(0, 1fr));\n    gap: 1rem;\n  }\n}\n\n@media (max-width: 768px) {\n\n  .animate-fade-in-left,\n  .animate-fade-in-right {\n    animation-delay: 0.1s;\n  }\n\n  .h-\\\\[750px\\\\] {\n    height: 500px;\n  }\n\n  .px-6 {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n\n  .py-8 {\n    padding-top: 1.5rem;\n    padding-bottom: 1.5rem;\n  }\n\n  .text-4xl {\n    font-size: 2rem;\n  }\n\n  .text-2xl {\n    font-size: 1.5rem;\n  }\n}\n</style>"],"names":["_ssrRenderAttrs","_mergeProps","_ssrRenderClass","_ssrInterpolate","_ssrRenderList"],"mappings":"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"}