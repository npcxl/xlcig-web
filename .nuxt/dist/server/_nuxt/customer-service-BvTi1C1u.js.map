{"version":3,"file":"customer-service-BvTi1C1u.js","sources":["../../../../pages/customer-service.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-gray-900 via-slate-900 to-black\">\r\n    <!-- 背景装饰 -->\r\n    <div class=\"fixed inset-0 pointer-events-none\">\r\n      <div\r\n        class=\"absolute top-20 left-20 w-96 h-96 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 rounded-full filter blur-3xl animate-pulse\">\r\n      </div>\r\n      <div\r\n        class=\"absolute bottom-20 right-20 w-80 h-80 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-full filter blur-3xl animate-pulse delay-1000\">\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 导航栏 -->\r\n    <AppHeader :show-back-button=\"false\" :show-nav-menu=\"true\" :show-breadcrumb=\"true\" :show-location=\"false\"\r\n      :show-search-button=\"false\" :show-notification-button=\"true\" :show-decorations=\"false\" current-page-title=\"在线客服\"\r\n      logo-size=\"medium\" />\r\n\r\n    <!-- 页面头部 -->\r\n    <section class=\"relative z-10\">\r\n      <div class=\"container mx-auto px-6 py-8\">\r\n        <div\r\n          class=\"glass-card-dark rounded-2xl p-8 border border-cyan-500/30 shadow-2xl shadow-cyan-500/20 animate-fade-in-up\">\r\n          <div class=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 class=\"text-4xl font-bold text-white mb-3 flex items-center gap-3\">\r\n                <i class=\"bi bi-headset text-cyan-400 text-3xl animate-bounce-gentle\"></i>\r\n                在线客服\r\n              </h1>\r\n              <p class=\"text-gray-300 text-lg\">专业的客服团队随时为您提供帮助</p>\r\n            </div>\r\n            <!-- 服务状态和工具 -->\r\n            <div class=\"flex items-center gap-4\">\r\n              <!-- 服务状态 -->\r\n              <div class=\"flex items-center gap-6\">\r\n                <div class=\"flex items-center gap-2\">\r\n                  <div class=\"w-3 h-3 rounded-full animate-pulse\"\r\n                    :class=\"serviceStatus.adminOnline ? 'bg-green-500' : 'bg-red-500'\"></div>\r\n                  <span class=\"text-sm text-gray-300\">\r\n                    {{ serviceStatus.adminOnline ? '客服在线' : '暂无客服在线' }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <!-- 工具按钮 -->\r\n              <div class=\"flex items-center gap-2\">\r\n                <button v-if=\"unreadCount > 0\" @click=\"markAllMessagesAsRead\"\r\n                  class=\"px-4 py-2 text-sm font-medium bg-cyan-600 hover:bg-cyan-500 text-white rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 active:scale-95\">\r\n                  <i class=\"bi bi-check2-all\"></i>\r\n                  标记已读 ({{ unreadCount }})\r\n                </button>\r\n                <button @click=\"loadChatSessions\"\r\n                  class=\"px-4 py-2 text-sm font-medium border border-gray-600 hover:border-cyan-500 text-gray-300 hover:text-white rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 active:scale-95\">\r\n                  <i class=\"bi bi-arrow-clockwise\"></i>\r\n                  刷新\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- 聊天工具栏 -->\r\n    <section class=\"relative z-10\">\r\n      <div class=\"container mx-auto px-6 py-4\">\r\n        <div\r\n          class=\"glass-card-dark rounded-2xl p-6 border border-cyan-500/30 shadow-2xl shadow-cyan-500/20 animate-fade-in-up\">\r\n          <div class=\"flex flex-wrap items-center justify-between gap-4\">\r\n            <div class=\"flex items-center gap-4\">\r\n              <div class=\"flex items-center gap-2\">\r\n                <i class=\"bi bi-chat-dots text-cyan-400\"></i>\r\n                <span class=\"text-white font-medium\">当前模式：</span>\r\n                <span class=\"text-cyan-300\">\r\n                  {{ selectedSession ? `与 ${selectedSession.user_nickname || selectedSession.user_name || '用户'} 对话` :\r\n                  '客服团队模式' }}\r\n                </span>\r\n              </div>\r\n              <div v-if=\"selectedSession\" class=\"flex items-center gap-2\">\r\n                <div class=\"w-2 h-2 rounded-full bg-green-500 animate-pulse\"></div>\r\n                <span class=\"text-sm text-gray-400\">用户对话中</span>\r\n              </div>\r\n            </div>\r\n            <div class=\"flex items-center gap-2\">\r\n              <div class=\"flex items-center gap-2 text-sm text-gray-400\">\r\n                <i class=\"bi bi-people\"></i>\r\n                <span>会话: {{ sessions.length }}</span>\r\n              </div>\r\n              <div class=\"flex items-center gap-2 text-sm text-gray-400\">\r\n                <i class=\"bi bi-chat-left-dots\"></i>\r\n                <span>消息: {{ messages.length }}</span>\r\n              </div>\r\n              <div class=\"flex items-center gap-2\">\r\n                <div class=\"w-2 h-2 rounded-full animate-pulse\" :class=\"isConnected ? 'bg-green-500' : 'bg-red-500'\">\r\n                </div>\r\n                <span class=\"text-xs text-gray-400\">{{ isConnected ? '已连接' : '连接中...' }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- 主要内容区 -->\r\n    <main class=\"container mx-auto px-6 py-8 relative z-10\">\r\n      <!-- 聊天主体 -->\r\n      <div class=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\r\n        <!-- 会话列表 -->\r\n        <div class=\"xl:col-span-1\">\r\n          <div\r\n            class=\"glass-card-dark rounded-2xl border border-cyan-500/30 shadow-2xl shadow-cyan-500/20 overflow-hidden animate-fade-in-left h-[750px] flex flex-col\">\r\n            <!-- 会话列表头部 -->\r\n            <div class=\"px-6 py-4 border-b border-gray-700/50 bg-gray-800/30\">\r\n              <div class=\"flex items-center justify-between\">\r\n                <div>\r\n                  <h3 class=\"text-lg font-semibold text-white mb-1 flex items-center gap-2\">\r\n                    <i class=\"bi bi-chat-left-text text-cyan-400\"></i>\r\n                    对话列表\r\n                  </h3>\r\n                  <p class=\"text-xs text-gray-400\">\r\n                    {{ sessions.length }} 个会话\r\n                    <span v-if=\"selectedSession\" class=\"text-cyan-400 ml-2\">\r\n                      · 已选中 {{ selectedSession.user_nickname || selectedSession.user_name || `用户\r\n                      #${selectedSession.user_id}` }}\r\n                    </span>\r\n                  </p>\r\n                </div>\r\n                <div class=\"flex items-center gap-2\">\r\n                  <!-- 返回客服模式按钮 -->\r\n                  <button v-if=\"selectedSession\" @click=\"backToCustomerService\"\r\n                    class=\"p-2 text-gray-400 hover:text-cyan-300 hover:bg-gray-700/50 rounded-lg transition-all duration-300 hover:scale-110 active:scale-95\"\r\n                    title=\"返回客服模式\">\r\n                    <i class=\"bi bi-arrow-left text-lg\"></i>\r\n                  </button>\r\n                  <!-- 刷新按钮 -->\r\n                  <button @click=\"loadChatSessions\"\r\n                    class=\"p-2 text-gray-400 hover:text-cyan-300 hover:bg-gray-700/50 rounded-lg transition-all duration-300 hover:scale-110 active:scale-95\"\r\n                    title=\"刷新列表\">\r\n                    <i class=\"bi bi-arrow-clockwise text-lg\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- 会话列表内容 -->\r\n            <div class=\"flex-1 overflow-y-auto\">\r\n              <div v-if=\"sessions.length === 0\"\r\n                class=\"flex flex-col items-center justify-center h-full text-center p-8\">\r\n                <div\r\n                  class=\"w-20 h-20 bg-gradient-to-br from-gray-700/50 to-gray-800/50 rounded-full flex items-center justify-center mb-6\">\r\n                  <i class=\"bi bi-chat-dots text-3xl text-gray-500\"></i>\r\n                </div>\r\n                <h4 class=\"text-xl font-semibold text-white mb-3\">暂无对话</h4>\r\n                <p class=\"text-gray-400 text-sm leading-relaxed\">等待用户开始对话<br>或从客服团队模式开始</p>\r\n              </div>\r\n\r\n              <div v-else class=\"p-4 space-y-3\">\r\n                <div v-for=\"(session, index) in sessions\" :key=\"session.id\" @click=\"selectSession(session)\"\r\n                  class=\"relative p-4 rounded-xl cursor-pointer transition-all duration-300 group hover:scale-[1.01] animate-fade-in-up border border-transparent hover:border-gray-600/50\"\r\n                  :class=\"[\r\n                    selectedSession?.id === session.id\r\n                      ? 'session-selected border-cyan-500/50'\r\n                      : 'hover:bg-gray-800/30'\r\n                  ]\" :style=\"{ animationDelay: `${index * 50}ms` }\">\r\n                  <!-- 选中状态指示器 -->\r\n                  <div v-if=\"selectedSession?.id === session.id\"\r\n                    class=\"absolute top-3 left-3 w-3 h-3 bg-cyan-400 rounded-full animate-pulse shadow-lg\"></div>\r\n                  <!-- 未读消息指示器 -->\r\n                  <div v-if=\"session.unread_count > 0\"\r\n                    class=\"absolute top-3 right-3 min-w-[20px] h-5 bg-red-500 rounded-full flex items-center justify-center px-1\">\r\n                    <span class=\"text-xs text-white font-semibold\">{{ session.unread_count > 99 ? '99+' :\r\n                      session.unread_count }}</span>\r\n                  </div>\r\n\r\n                  <!-- 用户信息 -->\r\n                  <div class=\"flex items-center space-x-4\">\r\n                    <!-- 用户头像 -->\r\n                    <div class=\"relative flex-shrink-0\">\r\n                      <div class=\"w-14 h-14 rounded-xl overflow-hidden border-2 transition-all duration-300 shadow-lg\"\r\n                        :class=\"selectedSession?.id === session.id ? 'border-cyan-400/70 shadow-cyan-400/20' : 'border-gray-700/50'\">\r\n                        <img v-if=\"session.user_avatar\" :src=\"session.user_avatar\" :alt=\"session.user_nickname || '用户'\"\r\n                          class=\"w-full h-full object-cover\" @error=\"$event.target.style.display = 'none'\" />\r\n                        <div v-else\r\n                          class=\"w-full h-full bg-gradient-to-br from-gray-600 to-gray-700 flex items-center justify-center\">\r\n                          <i class=\"bi bi-person text-white text-xl\"></i>\r\n                        </div>\r\n                      </div>\r\n                      <!-- 在线状态指示器 -->\r\n                      <div\r\n                        class=\"absolute -bottom-1 -right-1 w-5 h-5 bg-gray-800 rounded-full flex items-center justify-center border border-gray-700\">\r\n                        <div class=\"w-3 h-3 rounded-full\" \r\n                             :class=\"session.isOnline ? 'bg-green-500 animate-pulse' : 'bg-gray-500'\"></div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <!-- 会话信息 -->\r\n                    <div class=\"flex-1 min-w-0\">\r\n                      <div class=\"flex items-center justify-between mb-2\">\r\n                        <h4 class=\"text-white font-semibold text-base truncate\">\r\n                          {{ session.user_nickname || session.user_name || `用户 #${session.user_id}` }}\r\n                        </h4>\r\n                        <span class=\"text-xs text-gray-500 flex-shrink-0 ml-2\">\r\n                          {{ formatTime(session.last_message_time || session.started_at) }}\r\n                        </span>\r\n                      </div>\r\n\r\n                      <!-- 最后消息 -->\r\n                      <div class=\"mb-2\">\r\n                        <p class=\"text-sm text-gray-400 truncate leading-relaxed\">\r\n                          {{ session.last_message || '等待开始对话...' }}\r\n                        </p>\r\n                      </div>\r\n\r\n                      <!-- 状态信息 -->\r\n                      <div class=\"flex items-center justify-between\">\r\n                        <div class=\"flex items-center space-x-2\">\r\n                          <span class=\"text-xs px-2 py-1 rounded-lg font-medium\"\r\n                            :class=\"getSessionStatusClass(session.status)\">\r\n                            {{ getSessionStatusText(session.status) }}\r\n                          </span>\r\n                          <!-- 评分 -->\r\n                          <div v-if=\"session.rating\" class=\"flex items-center\">\r\n                            <div class=\"flex mr-1\">\r\n                              <i v-for=\"i in 5\" :key=\"i\"\r\n                                :class=\"i <= session.rating ? 'text-yellow-400' : 'text-gray-600'\"\r\n                                class=\"bi bi-star-fill text-xs\"></i>\r\n                            </div>\r\n                            <span class=\"text-xs text-gray-500\">{{ session.rating }}.0</span>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <!-- 在线状态 -->\r\n                        <div class=\"flex items-center gap-1\">\r\n                          <div class=\"w-2 h-2 rounded-full\" \r\n                               :class=\"session.isOnline ? 'bg-green-500 animate-pulse' : 'bg-gray-500'\"></div>\r\n                          <span class=\"text-xs\" \r\n                                :class=\"session.isOnline ? 'text-green-400' : 'text-gray-400'\">\r\n                            {{ session.isOnline ? '在线' : '离线' }}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 主聊天区域 -->\r\n        <div class=\"xl:col-span-3\">\r\n          <div\r\n            class=\"glass-card-dark rounded-2xl border border-cyan-500/30 shadow-2xl shadow-cyan-500/20 overflow-hidden animate-fade-in-right h-[750px] flex flex-col\">\r\n            <!-- 聊天头部 -->\r\n            <div class=\"px-6 py-4 border-b border-gray-700/50 bg-gray-800/30\">\r\n              <div class=\"flex items-center justify-between\">\r\n                <div class=\"flex items-center gap-4\">\r\n                  <!-- 聊天对象头像 -->\r\n                  <div\r\n                    class=\"w-12 h-12 rounded-xl flex items-center justify-center overflow-hidden border-2 shadow-lg transition-all duration-300\"\r\n                    :class=\"currentChatUser.isCustomerService ? 'border-cyan-500/50' : 'border-gray-600/50'\">\r\n                    <img v-if=\"currentChatUser.avatar\" :src=\"currentChatUser.avatar\" :alt=\"currentChatUser.name\"\r\n                      class=\"w-full h-full object-cover\" @error=\"handleAvatarError\" />\r\n                    <div v-else class=\"w-full h-full flex items-center justify-center animate-pulse-gentle\" :class=\"currentChatUser.isCustomerService\r\n                      ? 'bg-gradient-to-r from-cyan-500 to-blue-500'\r\n                      : 'bg-gradient-to-r from-gray-500 to-gray-600'\">\r\n                      <i class=\"text-white text-xl\"\r\n                        :class=\"currentChatUser.isCustomerService ? 'bi bi-headset' : 'bi bi-person'\"></i>\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <h3 class=\"text-xl font-semibold text-white flex items-center gap-2\">\r\n                      {{ currentChatUser.name }}\r\n                      <i v-if=\"currentChatUser.isCustomerService\"\r\n                        class=\"bi bi-patch-check-fill text-cyan-400 text-lg\"></i>\r\n                    </h3>\r\n                    <p class=\"text-sm text-gray-400 flex items-center gap-2\">\r\n                    <div class=\"w-2 h-2 rounded-full\"\r\n                      :class=\"currentChatUser.isCustomerService \r\n                        ? (isConnected ? 'bg-green-500 animate-pulse' : 'bg-gray-500')\r\n                        : (currentChatUser.isOnline ? 'bg-green-500 animate-pulse' : 'bg-gray-500')\">\r\n                    </div>\r\n                    {{ currentChatUser.status }}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div class=\"flex items-center gap-3\">\r\n                  <!-- 连接状态 -->\r\n                  <div class=\"flex items-center gap-2 px-3 py-1 rounded-lg bg-gray-700/30\">\r\n                    <div class=\"w-2 h-2 rounded-full animate-pulse\"\r\n                      :class=\"isConnected ? 'bg-green-500' : 'bg-red-500'\"></div>\r\n                    <span class=\"text-xs text-gray-400 font-medium\">{{ isConnected ? '已连接' : '连接中...' }}</span>\r\n                  </div>\r\n                  <!-- 功能按钮 -->\r\n                  <div class=\"flex items-center gap-1\">\r\n                    <button\r\n                      class=\"p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-lg transition-all duration-300 hover:scale-110 active:scale-95\"\r\n                      title=\"语音通话\">\r\n                      <i class=\"bi bi-telephone text-lg\"></i>\r\n                    </button>\r\n                    <button\r\n                      class=\"p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-lg transition-all duration-300 hover:scale-110 active:scale-95\"\r\n                      title=\"更多选项\">\r\n                      <i class=\"bi bi-three-dots text-lg\"></i>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- 聊天消息区域 -->\r\n            <div class=\"flex-1 overflow-y-auto p-6\" ref=\"messagesContainer\">\r\n              <!-- 欢迎消息 -->\r\n              <div v-if=\"messages.length === 0\" class=\"text-center py-16\">\r\n                <div\r\n                  class=\"w-24 h-24 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-2xl\">\r\n                  <i class=\"bi bi-chat-heart text-4xl text-cyan-400\"></i>\r\n                </div>\r\n                <h3 class=\"text-2xl font-bold text-white mb-3\">\r\n                  {{ selectedSession ? `与 ${selectedSession.user_nickname || selectedSession.user_name || `用户\r\n                  #${selectedSession.user_id}`} 的对话` : '欢迎使用在线客服' }}\r\n                </h3>\r\n                <p class=\"text-gray-400 mb-8 text-lg leading-relaxed max-w-md mx-auto\">\r\n                  {{ selectedSession ? '您正在与该用户进行私人对话，可以实时交流解决问题' : '有任何问题都可以在这里与我们沟通，您也可以从左侧选择特定用户进行对话' }}\r\n                </p>\r\n                <div class=\"flex flex-wrap justify-center gap-3 max-w-2xl mx-auto\">\r\n                  <button v-for=\"(quickMsg, index) in quickMessages\" :key=\"quickMsg\" @click=\"sendQuickMessage(quickMsg)\"\r\n                    class=\"px-6 py-3 bg-cyan-500/20 border border-cyan-400/30 text-cyan-300 rounded-xl text-sm font-medium hover:bg-cyan-500/30 hover:border-cyan-400/50 transition-all duration-300 hover:scale-105 active:scale-95 animate-fade-in-up shadow-lg hover:shadow-cyan-400/20\"\r\n                    :style=\"{ animationDelay: `${index * 100}ms` }\">\r\n                    {{ quickMsg }}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- 系统提示 -->\r\n              <div v-if=\"!serviceStatus.adminOnline && messages.length > 0\" class=\"mb-6 animate-fade-in-up\">\r\n                <div\r\n                  class=\"bg-yellow-500/10 border border-yellow-400/30 rounded-lg p-4 text-center transition-all duration-300 hover:bg-yellow-500/15 hover:border-yellow-400/50\">\r\n                  <i class=\"bi bi-info-circle text-yellow-400 mr-2 animate-pulse\"></i>\r\n                  <span class=\"text-yellow-300 text-sm\">当前暂无客服在线，您可以留言，我们会尽快回复您。</span>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- 聊天消息列表 -->\r\n              <div class=\"space-y-4\">\r\n                <TransitionGroup name=\"message\" tag=\"div\" class=\"space-y-4\">\r\n                  <div v-for=\"message in messages\" :key=\"message.id || message.timestamp\" class=\"flex\"\r\n                    :class=\"isCurrentUserMessage(message) ? 'justify-end' : 'justify-start'\">\r\n\r\n                    <!-- 其他人的消息 (左边) - 包括客服 -->\r\n                    <div v-if=\"!isCurrentUserMessage(message)\" class=\"flex items-start gap-3 max-w-[70%]\">\r\n                      <!-- 发送者头像 -->\r\n                      <div\r\n                        class=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden border border-gray-600/30\">\r\n                        <img v-if=\"getMessageAvatar(message)\" :src=\"getMessageAvatar(message)\"\r\n                          :alt=\"getMessageNickname(message)\" class=\"w-full h-full object-cover\"\r\n                          @error=\"handleAvatarError\" @load=\"handleAvatarLoad\" />\r\n                        <div v-else class=\"w-full h-full rounded-full flex items-center justify-center\"\r\n                          :class=\"isCustomerServiceMessage(message) ? 'bg-gradient-to-r from-green-500 to-emerald-500' : 'bg-gradient-to-r from-gray-500 to-gray-600'\">\r\n                          <i class=\"text-white text-sm\"\r\n                            :class=\"isCustomerServiceMessage(message) ? 'bi bi-person-badge' : 'bi bi-person'\"></i>\r\n                        </div>\r\n                      </div>\r\n                      <div>\r\n                        <div class=\"bg-gray-700/50 border border-gray-600/30 rounded-2xl rounded-tl-sm p-3 text-white\">\r\n                          {{ message.message || message.data?.message }}\r\n                        </div>\r\n                        <div class=\"flex items-center gap-2 mt-1 ml-1\">\r\n                          <span class=\"text-xs\"\r\n                            :class=\"isCustomerServiceMessage(message) ? 'text-green-400' : 'text-gray-400'\">\r\n                            {{ message.nickname || message.data?.nickname || (isCustomerServiceMessage(message) ? '客服' :\r\n                            '用户') }}\r\n                          </span>\r\n                          <span class=\"text-xs text-gray-500\">{{ formatTime(message.timestamp || message.created_at)\r\n                            }}</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <!-- 当前用户消息 (右边) -->\r\n                    <div v-else class=\"flex items-start gap-3 max-w-[70%] flex-row-reverse\">\r\n                      <!-- 用户头像 -->\r\n                      <div\r\n                        class=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden border border-cyan-500/30\">\r\n                        <img v-if=\"getUserAvatar(message)\" :src=\"getUserAvatar(message)\" :alt=\"getUserNickname(message)\"\r\n                          class=\"w-full h-full object-cover\" @error=\"handleAvatarError\" @load=\"handleAvatarLoad\" />\r\n                        <div v-else\r\n                          class=\"w-full h-full bg-gradient-to-r from-cyan-600 to-blue-600 rounded-full flex items-center justify-center\">\r\n                          <i class=\"bi bi-person text-white text-sm\"></i>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"text-right\">\r\n                        <div\r\n                          class=\"bg-gradient-to-r from-cyan-600 to-blue-600 rounded-2xl rounded-tr-sm p-3 text-white\">\r\n                          {{ message.message || message.data?.message }}\r\n                        </div>\r\n                        <div class=\"flex items-center gap-2 mt-1 justify-end mr-1\">\r\n                          <span class=\"text-xs text-gray-500\">{{ formatTime(message.timestamp || message.created_at)\r\n                            }}</span>\r\n                          <span class=\"text-xs text-cyan-400\">\r\n                            {{ getUserNickname(message) }}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                </TransitionGroup>\r\n\r\n                <!-- 正在输入提示 -->\r\n                <div v-if=\"isTyping && typingUsers.size > 0\" class=\"flex justify-start mt-4\">\r\n                  <div v-for=\"[userId, userInfo] in typingUsers\" :key=\"userId\" class=\"flex items-start gap-3 max-w-[70%] animate-fade-in-up mb-2\">\r\n                    <!-- 用户头像 -->\r\n                    <div class=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden border border-gray-600/30\">\r\n                      <img \r\n                        v-if=\"userInfo.avatar\" \r\n                        :src=\"userInfo.avatar\" \r\n                        :alt=\"userInfo.nickname\"\r\n                        class=\"w-full h-full object-cover\"\r\n                        @error=\"$event.target.style.display = 'none'\"\r\n                      />\r\n                      <div \r\n                        v-else\r\n                        class=\"w-full h-full bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center animate-pulse-gentle\">\r\n                        <i class=\"bi bi-person-badge text-white text-sm\"></i>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <div class=\"bg-gray-700/50 border border-gray-600/30 rounded-2xl rounded-tl-sm p-3\">\r\n                        <div class=\"flex gap-1\">\r\n                          <div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\r\n                          <div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 0.1s\"></div>\r\n                          <div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 0.2s\"></div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"flex items-center gap-2 mt-1 ml-1\">\r\n                        <span class=\"text-xs text-green-400\">{{ userInfo.nickname }}</span>\r\n                        <span class=\"text-xs text-gray-500\">正在输入...</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- 聊天输入区域 -->\r\n            <div class=\"px-6 py-4 border-t border-gray-700/50 bg-gray-800/20\">\r\n              <!-- 工具按钮组 -->\r\n              <div class=\"flex items-center justify-between mb-3\">\r\n                <div class=\"flex items-center gap-2\">\r\n                  <button\r\n                    class=\"p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-lg transition-all duration-300 hover:scale-110 active:scale-95\"\r\n                    title=\"附件\">\r\n                    <i class=\"bi bi-paperclip text-lg\"></i>\r\n                  </button>\r\n                  <button\r\n                    class=\"p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-lg transition-all duration-300 hover:scale-110 active:scale-95\"\r\n                    title=\"表情\">\r\n                    <i class=\"bi bi-emoji-smile text-lg\"></i>\r\n                  </button>\r\n                </div>\r\n                \r\n                <!-- 输入提示工具栏 -->\r\n                <div class=\"flex items-center gap-3\">\r\n                  <span class=\"text-xs text-gray-500 flex items-center gap-1\">\r\n                    <i class=\"bi bi-keyboard\"></i>\r\n                    Enter 发送，Shift+Enter 换行\r\n                  </span>\r\n                  <div v-if=\"newMessage.length > 0\" class=\"text-xs text-gray-500\">\r\n                    {{ newMessage.length }} 字符\r\n                  </div>\r\n                  <button v-if=\"unreadCount > 0\" @click=\"markAllMessagesAsRead\"\r\n                    class=\"text-xs text-cyan-400 hover:text-cyan-300 transition-all duration-300 hover:scale-105 active:scale-95 px-3 py-1 rounded-lg hover:bg-cyan-500/10 border border-cyan-500/20\">\r\n                    <i class=\"bi bi-check2-all mr-1\"></i>\r\n                    标记已读 ({{ unreadCount }})\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- 输入框和发送按钮 -->\r\n              <div class=\"flex items-end gap-3\">\r\n                <!-- 输入框区域 -->\r\n                <div class=\"flex-1 relative\">\r\n                  <textarea v-model=\"newMessage\" @keydown.enter.exact.prevent=\"sendMessage\"\r\n                    @input=\"adjustTextareaHeight\" @focus=\"handleInputFocus\" @blur=\"handleInputBlur\"\r\n                    :disabled=\"!isConnected\" placeholder=\"输入您的消息... (Enter 发送，Shift+Enter 换行)\" rows=\"1\"\r\n                    class=\"w-full px-4 py-3 bg-gray-800/50 border border-gray-600/50 rounded-xl focus:ring-2 focus:ring-cyan-500 focus:border-cyan-400 text-white placeholder-gray-400 transition-all duration-300 resize-none hover:border-cyan-500/50 focus:scale-[1.01] min-h-[48px] max-h-32 hide-scrollbar\"></textarea>\r\n                  <!-- 输入状态指示 -->\r\n                  <div v-if=\"isInputFocused\"\r\n                    class=\"absolute -top-6 left-2 text-xs text-cyan-400 bg-gray-800/80 px-2 py-1 rounded-lg\">\r\n                    正在输入...\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- 发送按钮 -->\r\n                <button @click=\"sendMessage\" :disabled=\"!newMessage.trim() || !isConnected\"\r\n                  class=\"px-6 py-3 bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 disabled:from-gray-600 disabled:to-gray-700 text-white font-semibold rounded-xl transition-all duration-300 shadow-lg shadow-cyan-500/20 hover:shadow-cyan-500/40 disabled:shadow-none flex items-center gap-2 hover:scale-105 active:scale-95 min-h-[48px] flex-shrink-0\">\r\n                  <i class=\"bi bi-send text-lg\"></i>\r\n                  <span class=\"hidden sm:inline\">发送</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, onUnmounted, nextTick, watch } from 'vue'\r\nimport { useUserStore } from '~/stores/user'\r\nimport { ChatApi } from '~/utils/api/chat'\r\n\r\n// 获取运行时配置\r\nconst config = useRuntimeConfig()\r\n\r\n// 状态管理\r\nconst userStore = useUserStore()\r\nconst isConnected = ref(false)\r\nconst isTyping = ref(false)\r\nconst typingUsers = ref(new Map()) // 存储正在输入的用户，格式：userId -> { nickname, avatar, timestamp }\r\nconst unreadCount = ref(0)\r\nconst newMessage = ref('')\r\nconst messages = ref([])\r\nconst sessions = ref([])\r\nconst messagesContainer = ref()\r\nconst selectedSession = ref(null) // 当前选中的会话\r\n\r\n// 服务状态\r\nconst serviceStatus = ref({\r\n  adminOnline: false,\r\n  adminCount: 0,\r\n  totalUsers: 0,\r\n  normalUserCount: 0\r\n})\r\n\r\n// WebSocket连接\r\nlet websocket = null\r\nlet heartbeatTimer = null\r\n\r\n// 快速消息\r\nconst quickMessages = [\r\n  '你好，请问有什么可以帮助您的？',\r\n  '我想了解产品信息',\r\n  '订单相关问题',\r\n  '技术支持'\r\n]\r\n\r\n// 计算属性\r\nconst isLoggedIn = computed(() => userStore.isLoggedIn)\r\n\r\n// 当前聊天对象信息\r\nconst currentChatUser = computed(() => {\r\n  if (!selectedSession.value) {\r\n    return {\r\n      name: 'xlCig 客服团队',\r\n      avatar: null,\r\n      status: serviceStatus.value.adminOnline ? '在线 - 平均响应时间 < 1分钟' : '离线 - 我们会尽快回复您的消息',\r\n      isCustomerService: true\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: selectedSession.value.displayName || selectedSession.value.user_nickname || selectedSession.value.user_name || `用户 #${selectedSession.value.user_id}`,\r\n    avatar: selectedSession.value.avatar || selectedSession.value.user_avatar,\r\n    status: selectedSession.value.isOnline ? '在线 - 用户对话' : '离线 - 用户对话',\r\n    isCustomerService: false,\r\n    isOnline: selectedSession.value.isOnline,\r\n    userId: selectedSession.value.user_id,\r\n    sessionId: selectedSession.value.id\r\n  }\r\n})\r\n\r\n// 页面元数据\r\nuseHead({\r\n  title: '在线客服 - xlCig',\r\n  meta: [\r\n    { name: 'description', content: '专业的在线客服服务，为您提供实时帮助和支持' }\r\n  ]\r\n})\r\n\r\n// WebSocket连接\r\nconst connectWebSocket = () => {\r\n  if (!isLoggedIn.value || !userStore.token) {\r\n    console.error('用户未登录，无法连接WebSocket')\r\n    return\r\n  }\r\n\r\n  try {\r\n    const wsUrl = `wss://api.xlcig.cn/websocket?token=${userStore.token}`\r\n    console.log('正在连接WebSocket:', wsUrl)\r\n\r\n    websocket = new WebSocket(wsUrl)\r\n\r\n    websocket.onopen = () => {\r\n      console.log('WebSocket连接成功')\r\n      isConnected.value = true\r\n      startHeartbeat()\r\n      \r\n      // 连接成功后，请求获取当前所有用户的在线状态\r\n      setTimeout(() => {\r\n        if (websocket && websocket.readyState === WebSocket.OPEN) {\r\n          websocket.send(JSON.stringify({ \r\n            type: 'get_users_status',\r\n            data: {}\r\n          }))\r\n          console.log('已请求获取用户在线状态')\r\n        }\r\n      }, 1000)\r\n    }\r\n\r\n    websocket.onmessage = (event) => {\r\n      try {\r\n        const message = JSON.parse(event.data)\r\n        handleWebSocketMessage(message)\r\n      } catch (error) {\r\n        console.error('解析WebSocket消息失败:', error)\r\n      }\r\n    }\r\n\r\n    websocket.onclose = () => {\r\n      console.log('WebSocket连接关闭')\r\n      isConnected.value = false\r\n      stopHeartbeat()\r\n\r\n      // 自动重连\r\n      setTimeout(() => {\r\n        console.log('尝试重新连接WebSocket...')\r\n        connectWebSocket()\r\n      }, 3000)\r\n    }\r\n\r\n    websocket.onerror = (error) => {\r\n      console.error('WebSocket连接错误:', error)\r\n      isConnected.value = false\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('创建WebSocket连接失败:', error)\r\n  }\r\n}\r\n\r\nconst disconnectWebSocket = () => {\r\n  if (websocket) {\r\n    websocket.close()\r\n    websocket = null\r\n  }\r\n  stopHeartbeat()\r\n  isConnected.value = false\r\n}\r\n\r\n// 心跳机制\r\nconst startHeartbeat = () => {\r\n  heartbeatTimer = setInterval(() => {\r\n    if (websocket && websocket.readyState === WebSocket.OPEN) {\r\n      websocket.send(JSON.stringify({ type: 'ping' }))\r\n    }\r\n  }, 30000)\r\n}\r\n\r\nconst stopHeartbeat = () => {\r\n  if (heartbeatTimer) {\r\n    clearInterval(heartbeatTimer)\r\n    heartbeatTimer = null\r\n  }\r\n}\r\n\r\n// 处理WebSocket消息\r\nconst handleWebSocketMessage = (message) => {\r\n  console.log('收到WebSocket消息:', message)\r\n\r\n  switch (message.type) {\r\n    case 'user_info':\r\n      console.log('用户信息:', message.data)\r\n      unreadCount.value = message.data.unreadCount || 0\r\n      if (message.data.stats) {\r\n        serviceStatus.value = message.data.stats\r\n      }\r\n      break\r\n\r\n    case 'message':\r\n      // 确保包含头像和昵称信息，并正确识别消息类型\r\n      const isCustomerServiceMsg = message.isAdmin || message.data?.isAdmin || message.data?.isCustomerService || message.data?.role === 'admin' || message.data?.role === 'customer_service'\r\n\r\n      const messageWithUserInfo = {\r\n        ...message,\r\n        user_id: message.user_id || message.data?.user_id || message.data?.userId,\r\n        avatar: message.avatar || message.data?.avatar,\r\n        nickname: message.nickname || message.data?.nickname || message.data?.userName,\r\n        userName: message.userName || message.data?.userName,\r\n        // 检查是否为客服消息\r\n        isAdmin: isCustomerServiceMsg,\r\n        message_type: message.message_type || (isCustomerServiceMsg ? 'customer_service' : 'user'),\r\n        // 对于客服消息，添加发送者ID信息\r\n        ...(isCustomerServiceMsg && {\r\n          senderId: message.data?.userId || message.userId || message.data?.senderId,\r\n          data: {\r\n            ...message.data,\r\n            userId: message.data?.userId || message.userId,\r\n            senderId: message.data?.senderId || message.data?.userId\r\n          }\r\n        })\r\n      }\r\n\r\n      console.log('处理后的消息:', messageWithUserInfo)\r\n\r\n      // 如果选中了特定用户，只显示该用户相关的消息\r\n      if (selectedSession.value) {\r\n        const messageUserId = messageWithUserInfo.user_id || messageWithUserInfo.data?.targetUserId\r\n        if (messageUserId === selectedSession.value.user_id) {\r\n          messages.value.push(messageWithUserInfo)\r\n          scrollToBottom()\r\n        } else {\r\n          console.log('消息不属于当前选中用户，不显示:', messageUserId, '当前用户:', selectedSession.value.user_id)\r\n        }\r\n      } else {\r\n        // 未选中特定用户，显示所有消息（默认客服模式）\r\n        messages.value.push(messageWithUserInfo)\r\n        scrollToBottom()\r\n      }\r\n\r\n      // 当收到新消息时自动标记为已读\r\n      nextTick(() => {\r\n        autoMarkAsRead()\r\n      })\r\n\r\n      // 更新会话列表中的未读数量和最后消息\r\n      if (messageWithUserInfo.user_id) {\r\n        updateSessionList(messageWithUserInfo)\r\n      }\r\n      break\r\n\r\n    case 'typing':\r\n      console.log('收到输入状态消息:', message.data)\r\n      handleTypingMessage(message.data, true)\r\n      break\r\n\r\n    case 'stop_typing':\r\n      console.log('收到停止输入消息:', message.data)\r\n      handleTypingMessage(message.data, false)\r\n      break\r\n\r\n    case 'message_read':\r\n      unreadCount.value = message.data.unreadCount || 0\r\n      break\r\n\r\n    case 'user_online':\r\n      console.log('用户上线:', message.data)\r\n      updateUserOnlineStatus(message.data.userId || message.data.user_id, true, message.data)\r\n      break\r\n\r\n    case 'user_offline':\r\n      console.log('用户下线:', message.data)\r\n      updateUserOnlineStatus(message.data.userId || message.data.user_id, false, message.data)\r\n      break\r\n\r\n    case 'user_status_update':\r\n      console.log('用户状态更新:', message.data)\r\n      if (message.data && (message.data.userId || message.data.user_id)) {\r\n        const isOnline = message.data.isOnline !== undefined ? message.data.isOnline : true\r\n        updateUserOnlineStatus(message.data.userId || message.data.user_id, isOnline, message.data)\r\n      }\r\n      break\r\n\r\n    case 'users_status_response':\r\n      console.log('收到用户状态列表:', message.data)\r\n      if (message.data && Array.isArray(message.data.users)) {\r\n        message.data.users.forEach(user => {\r\n          updateUserOnlineStatus(user.userId || user.user_id, user.isOnline, user)\r\n        })\r\n      }\r\n      break\r\n\r\n    case 'error':\r\n      console.error('WebSocket错误:', message.data)\r\n      break\r\n  }\r\n}\r\n\r\n// 清除所有typing状态\r\nconst clearTypingStates = () => {\r\n  typingUsers.value.clear()\r\n  isTyping.value = false\r\n  console.log('已清除所有typing状态')\r\n}\r\n\r\n// 处理输入状态消息\r\nconst handleTypingMessage = (data, isTyping) => {\r\n  const userId = data.userId || data.user_id || data.senderId\r\n  const targetUserId = data.targetUserId || data.target_user_id\r\n  \r\n  console.log('处理输入状态:', { userId, targetUserId, isTyping, currentSession: selectedSession.value?.user_id })\r\n  \r\n  // 如果是在特定用户对话模式下\r\n  if (selectedSession.value) {\r\n    // 只有当前选中用户或者目标用户是当前选中用户时，才显示typing状态\r\n    const isCurrentSessionUser = userId === selectedSession.value.user_id || targetUserId === selectedSession.value.user_id\r\n    \r\n    if (isCurrentSessionUser) {\r\n      if (isTyping) {\r\n        // 添加/更新正在输入的用户\r\n        typingUsers.value.set(userId, {\r\n          nickname: data.nickname || data.userName || '用户',\r\n          avatar: data.avatar,\r\n          timestamp: Date.now()\r\n        })\r\n        isTyping.value = true\r\n        console.log(`用户 ${userId} 开始输入`)\r\n      } else {\r\n        // 移除正在输入的用户\r\n        typingUsers.value.delete(userId)\r\n        isTyping.value = typingUsers.value.size > 0\r\n        console.log(`用户 ${userId} 停止输入`)\r\n      }\r\n    }\r\n  } else {\r\n    // 客服团队模式下，显示所有输入状态\r\n    if (isTyping) {\r\n      typingUsers.value.set(userId, {\r\n        nickname: data.nickname || data.userName || '用户',\r\n        avatar: data.avatar,\r\n        timestamp: Date.now()\r\n      })\r\n      isTyping.value = true\r\n      console.log(`用户 ${userId} 开始输入（团队模式）`)\r\n    } else {\r\n      typingUsers.value.delete(userId)\r\n      isTyping.value = typingUsers.value.size > 0\r\n      console.log(`用户 ${userId} 停止输入（团队模式）`)\r\n    }\r\n  }\r\n}\r\n\r\n// 更新用户在线状态\r\nconst updateUserOnlineStatus = (userId, isOnline, userData = {}) => {\r\n  if (!userId) return\r\n  \r\n  console.log(`更新用户 ${userId} 在线状态:`, isOnline, userData)\r\n  \r\n  // 更新会话列表中的用户状态\r\n  const sessionIndex = sessions.value.findIndex(session => session.user_id === userId)\r\n  if (sessionIndex >= 0) {\r\n    const session = sessions.value[sessionIndex]\r\n    const previousStatus = session.isOnline\r\n    \r\n    // 更新在线状态\r\n    session.isOnline = isOnline\r\n    \r\n    // 如果有新的用户数据，更新相关信息\r\n    if (userData.userName && userData.userName !== session.user_name) {\r\n      session.user_name = userData.userName\r\n      session.displayName = userData.userName\r\n    }\r\n    if (userData.nickname && userData.nickname !== session.user_nickname) {\r\n      session.user_nickname = userData.nickname\r\n      session.displayName = userData.nickname\r\n    }\r\n    if (userData.avatar && userData.avatar !== session.avatar) {\r\n      session.avatar = userData.avatar\r\n      session.user_avatar = userData.avatar\r\n    }\r\n    \r\n    // 状态变化提示\r\n    if (previousStatus !== isOnline) {\r\n      const userName = session.displayName || session.user_nickname || session.user_name || `用户 #${userId}`\r\n      console.log(`📱 ${userName} ${isOnline ? '🟢 上线了' : '🔴 下线了'}`)\r\n      \r\n      // 可以在这里添加Toast提示或其他视觉反馈\r\n      // 例如：showToast(`${userName} ${isOnline ? '上线了' : '下线了'}`)\r\n    }\r\n    \r\n    console.log(`会话列表中用户 ${userId} 状态已更新:`, session)\r\n  } else {\r\n    // 如果会话列表中没有这个用户，且用户上线了，可以考虑重新加载会话列表\r\n    if (isOnline) {\r\n      console.log(`新用户 ${userId} 上线，重新加载会话列表`)\r\n      loadChatSessions()\r\n    }\r\n  }\r\n  \r\n  // 如果当前选中的用户状态发生变化，触发计算属性更新\r\n  if (selectedSession.value && selectedSession.value.user_id === userId) {\r\n    selectedSession.value.isOnline = isOnline\r\n    \r\n    // 更新选中用户的其他信息\r\n    if (userData.userName) selectedSession.value.user_name = userData.userName\r\n    if (userData.nickname) selectedSession.value.user_nickname = userData.nickname\r\n    if (userData.avatar) {\r\n      selectedSession.value.avatar = userData.avatar\r\n      selectedSession.value.user_avatar = userData.avatar\r\n    }\r\n    \r\n    console.log(`当前选中用户 ${userId} 状态已更新`, selectedSession.value)\r\n  }\r\n}\r\n\r\n// 自动调整textarea高度\r\nconst adjustTextareaHeight = (event) => {\r\n  const textarea = event.target\r\n  textarea.style.height = 'auto'\r\n  textarea.style.height = Math.min(textarea.scrollHeight, 128) + 'px' // 最大高度128px\r\n}\r\n\r\n// 发送消息\r\nconst sendMessage = async () => {\r\n  if (!newMessage.value.trim()) {\r\n    return\r\n  }\r\n\r\n  const messageText = newMessage.value.trim()\r\n\r\n  try {\r\n    if (selectedSession.value) {\r\n      // 选中了特定用户，使用API发送消息\r\n      console.log('向用户发送消息:', selectedSession.value.user_id, messageText)\r\n      const response = await ChatApi.sendMessage(messageText, selectedSession.value.user_id)\r\n\r\n      if (response.success) {\r\n        // 添加消息到本地显示（客服发送的消息）\r\n        const adminMessage = {\r\n          id: Date.now(),\r\n          user_id: selectedSession.value.user_id, // 消息归属于目标用户（数据库存储）\r\n          senderId: userStore.user?.id, // 发送者ID（用于UI判断）\r\n          message: messageText,\r\n          message_type: 'customer_service',\r\n          isAdmin: true,\r\n          avatar: userStore.user?.avatar,\r\n          nickname: userStore.userDisplayName,\r\n          userName: userStore.userDisplayName,\r\n          timestamp: Date.now(),\r\n          created_at: new Date().toISOString(),\r\n          data: {\r\n            userId: userStore.user?.id, // 确保data中也有发送者ID\r\n            userName: userStore.userDisplayName,\r\n            isAdmin: true\r\n          }\r\n        }\r\n\r\n        messages.value.push(adminMessage)\r\n        console.log('消息发送成功，已添加到本地显示')\r\n      }\r\n    } else {\r\n      // 默认客服模式，通过WebSocket发送\r\n      if (!isConnected.value || !websocket) {\r\n        console.error('WebSocket未连接')\r\n        return\r\n      }\r\n\r\n      const message = {\r\n        type: 'message',\r\n        data: {\r\n          message: messageText,\r\n          user_id: userStore.user?.id,\r\n          userId: userStore.user?.id\r\n        }\r\n      }\r\n\r\n      websocket.send(JSON.stringify(message))\r\n\r\n      // 添加到本地消息列表\r\n      const userAvatar = userStore.user?.avatar\r\n      messages.value.push({\r\n        ...message,\r\n        data: {\r\n          ...message.data,\r\n          userId: userStore.user?.id,\r\n          userName: userStore.userDisplayName,\r\n          isAdmin: false,\r\n          avatar: userAvatar\r\n        },\r\n        user_id: userStore.user?.id,\r\n        timestamp: Date.now(),\r\n        isAdmin: false,\r\n        message_type: 'user',\r\n        avatar: userAvatar,\r\n        nickname: userStore.user?.nickname || userStore.userDisplayName,\r\n        userName: userStore.userDisplayName\r\n      })\r\n    }\r\n\r\n    newMessage.value = ''\r\n\r\n    // 重置textarea高度\r\n    nextTick(() => {\r\n      const textarea = document.querySelector('textarea')\r\n      if (textarea) {\r\n        textarea.style.height = '48px'\r\n      }\r\n    })\r\n\r\n    scrollToBottom()\r\n\r\n    // 发送消息后停止输入状态\r\n    sendStopTyping()\r\n\r\n  } catch (error) {\r\n    console.error('发送消息失败:', error)\r\n  }\r\n}\r\n\r\n// 发送快速消息\r\nconst sendQuickMessage = (message) => {\r\n  newMessage.value = message\r\n  sendMessage()\r\n}\r\n\r\n// 输入框焦点状态管理\r\nconst isInputFocused = ref(false)\r\n\r\n// 处理输入框获得焦点\r\nconst handleInputFocus = () => {\r\n  console.log('输入框获得焦点')\r\n  isInputFocused.value = true\r\n\r\n  // 发送正在输入状态（节流发送）\r\n  if (!isConnected.value || !websocket) return\r\n\r\n  try {\r\n    websocket.send(JSON.stringify({\r\n      type: 'typing',\r\n      data: {\r\n        userId: userStore.user?.id,\r\n        userName: userStore.userDisplayName,\r\n        nickname: userStore.user?.nickname || userStore.userDisplayName,\r\n        avatar: userStore.user?.avatar,\r\n        targetUserId: selectedSession.value?.user_id,\r\n        chatMode: selectedSession.value ? 'user_conversation' : 'customer_service',\r\n        isAdmin: userStore.user?.role === 'admin',\r\n        isCustomerService: userStore.user?.role === 'admin' || userStore.user?.role === 'customer_service'\r\n      }\r\n    }))\r\n  } catch (error) {\r\n    console.error('发送输入状态失败:', error)\r\n  }\r\n}\r\n\r\n// 处理输入框失去焦点\r\nconst handleInputBlur = () => {\r\n  console.log('输入框失去焦点')\r\n  isInputFocused.value = false\r\n\r\n  // 延迟发送停止输入状态，避免快速焦点切换导致的闪烁\r\n  setTimeout(() => {\r\n    if (!isInputFocused.value) {\r\n      sendStopTyping()\r\n    }\r\n  }, 500)\r\n}\r\n\r\nconst sendStopTyping = () => {\r\n  if (!isConnected.value || !websocket) return\r\n\r\n  try {\r\n    websocket.send(JSON.stringify({\r\n      type: 'stop_typing',\r\n      data: {\r\n        userId: userStore.user?.id,\r\n        userName: userStore.userDisplayName,\r\n        nickname: userStore.user?.nickname || userStore.userDisplayName,\r\n        avatar: userStore.user?.avatar,\r\n        targetUserId: selectedSession.value?.user_id,\r\n        chatMode: selectedSession.value ? 'user_conversation' : 'customer_service',\r\n        isAdmin: userStore.user?.role === 'admin',\r\n        isCustomerService: userStore.user?.role === 'admin' || userStore.user?.role === 'customer_service'\r\n      }\r\n    }))\r\n  } catch (error) {\r\n    console.error('发送停止输入状态失败:', error)\r\n  }\r\n}\r\n\r\n// 加载数据\r\nconst loadChatHistory = async () => {\r\n  try {\r\n    const response = await ChatApi.getChatHistory({ limit: 50 })\r\n    if (response.success && response.data) {\r\n      messages.value = response.data.map(msg => {\r\n        console.log('历史消息:', msg)\r\n\r\n        // 判断是否为客服消息的逻辑\r\n        const isCustomerService = msg.message_type === 'customer_service' ||\r\n          msg.role === 'admin' ||\r\n          msg.role === 'customer_service'\r\n\r\n        const processedMsg = {\r\n          ...msg,\r\n          user_id: msg.user_id || msg.id, // 确保有user_id\r\n          isAdmin: isCustomerService,\r\n          avatar: msg.avatar || msg.user_avatar, // 优先使用消息头像，再使用用户头像\r\n          nickname: msg.nickname || msg.user_nickname || msg.username,\r\n          userName: msg.nickname || msg.user_nickname || msg.username,\r\n          message_type: isCustomerService ? 'customer_service' : 'user'\r\n        }\r\n\r\n        console.log('处理后的历史消息:', processedMsg, {\r\n          isCustomerService,\r\n          userId: msg.user_id,\r\n          currentUserId: userStore.user?.id,\r\n          isCurrentUser: msg.user_id === userStore.user?.id\r\n        })\r\n\r\n        return processedMsg\r\n      })\r\n      console.log('所有处理后的历史消息:', messages.value)\r\n      scrollToBottom()\r\n    }\r\n  } catch (error) {\r\n    console.error('加载聊天历史失败:', error)\r\n  }\r\n}\r\n\r\nconst loadChatSessions = async () => {\r\n  try {\r\n    const response = await ChatApi.getUserSessions({ limit: 20 })\r\n    if (response.success && response.data) {\r\n      sessions.value = response.data.map(session => {\r\n        console.log('原始用户会话数据:', session)\r\n        const processedSession = {\r\n          ...session,\r\n          id: session.user_id, // 使用user_id作为会话ID\r\n          user_avatar: session.avatar,\r\n          user_nickname: session.nickname,\r\n          user_name: session.nickname || session.username,\r\n          unread_count: session.unread_count || 0,\r\n          last_message: session.last_message,\r\n          last_message_time: session.last_message_time,\r\n          last_message_type: session.last_message_type,\r\n          isOnline: session.isOnline || false, // 在线状态\r\n          displayName: session.displayName || session.nickname || session.username, // 显示名称\r\n          status: 'active' // 默认状态\r\n        }\r\n        console.log('处理后的用户会话数据:', processedSession)\r\n        return processedSession\r\n      })\r\n    }\r\n  } catch (error) {\r\n    console.error('加载用户会话列表失败:', error)\r\n  }\r\n}\r\n\r\nconst loadServiceStatus = async () => {\r\n  try {\r\n    const response = await ChatApi.getServiceStatus()\r\n    if (response.success) {\r\n      serviceStatus.value = response.data\r\n    }\r\n  } catch (error) {\r\n    console.error('获取服务状态失败:', error)\r\n  }\r\n}\r\n\r\nconst loadUnreadCount = async () => {\r\n  try {\r\n    const response = await ChatApi.getUnreadCount()\r\n    if (response.success) {\r\n      unreadCount.value = response.data.unreadCount\r\n    }\r\n  } catch (error) {\r\n    console.error('获取未读消息数量失败:', error)\r\n  }\r\n}\r\n\r\n// 标记所有消息为已读\r\nconst markAllMessagesAsRead = async () => {\r\n  try {\r\n    const response = await ChatApi.markMessagesAsRead()\r\n    if (response.success) {\r\n      unreadCount.value = response.data.unreadCount\r\n    }\r\n  } catch (error) {\r\n    console.error('标记消息已读失败:', error)\r\n  }\r\n}\r\n\r\n// 工具函数\r\nconst scrollToBottom = () => {\r\n  nextTick(() => {\r\n    if (messagesContainer.value) {\r\n      messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight\r\n    }\r\n  })\r\n}\r\n\r\n// 判断是否为当前用户的消息\r\nconst isCurrentUserMessage = (message) => {\r\n  const currentUserId = userStore.user?.id\r\n\r\n  // 如果是客服消息类型，检查是否是当前管理员发送的\r\n  if (message.message_type === 'customer_service' || message.isAdmin) {\r\n    // 检查发送者信息，优先使用 senderId 或 data.userId\r\n    const senderId = message.senderId || message.data?.userId || message.data?.senderId\r\n    if (senderId) {\r\n      return senderId === currentUserId\r\n    }\r\n\r\n    // 如果没有明确的发送者ID，检查昵称/用户名是否匹配\r\n    const senderName = message.nickname || message.userName || message.data?.userName\r\n    const currentUserName = userStore.userDisplayName\r\n    if (senderName && currentUserName) {\r\n      return senderName === currentUserName\r\n    }\r\n  }\r\n\r\n  // 对于普通用户消息，使用 user_id 判断\r\n  const messageUserId = message.user_id || message.data?.user_id || message.data?.userId\r\n  return messageUserId === currentUserId\r\n}\r\n\r\n// 判断是否为客服消息（仅用于显示客服标识，不影响位置）\r\nconst isCustomerServiceMessage = (message) => {\r\n  // 多重检查确保正确识别客服消息\r\n  return message.isAdmin === true ||\r\n    message.message_type === 'customer_service' ||\r\n    message.data?.isAdmin === true ||\r\n    message.data?.isCustomerService === true ||\r\n    message.data?.role === 'admin' ||\r\n    message.data?.role === 'customer_service'\r\n}\r\n\r\nconst formatTime = (timestamp) => {\r\n  if (!timestamp) return ''\r\n\r\n  const date = new Date(timestamp)\r\n  const now = new Date()\r\n  const diffInMs = now - date\r\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60))\r\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60))\r\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24))\r\n\r\n  // 如果是今天\r\n  if (diffInDays === 0) {\r\n    if (diffInMinutes < 1) {\r\n      return '刚刚'\r\n    } else if (diffInMinutes < 60) {\r\n      return `${diffInMinutes}分钟前`\r\n    } else {\r\n      return date.toLocaleTimeString('zh-CN', {\r\n        hour12: false,\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      })\r\n    }\r\n  }\r\n  // 如果是昨天\r\n  else if (diffInDays === 1) {\r\n    return `昨天 ${date.toLocaleTimeString('zh-CN', {\r\n      hour12: false,\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    })}`\r\n  }\r\n  // 如果是更早\r\n  else if (diffInDays < 7) {\r\n    const weekdays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\n    return `${weekdays[date.getDay()]} ${date.toLocaleTimeString('zh-CN', {\r\n      hour12: false,\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    })}`\r\n  }\r\n  // 超过一周\r\n  else {\r\n    return date.toLocaleDateString('zh-CN', {\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    })\r\n  }\r\n}\r\n\r\nconst formatDate = (dateString) => {\r\n  if (!dateString) return ''\r\n\r\n  const date = new Date(dateString)\r\n  const now = new Date()\r\n  const diffInMs = now - date\r\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24))\r\n\r\n  if (diffInDays === 0) {\r\n    return date.toLocaleTimeString('zh-CN', {\r\n      hour12: false,\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    })\r\n  } else if (diffInDays === 1) {\r\n    return '昨天'\r\n  } else if (diffInDays < 7) {\r\n    const weekdays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\n    return weekdays[date.getDay()]\r\n  } else {\r\n    return date.toLocaleDateString('zh-CN', {\r\n      month: '2-digit',\r\n      day: '2-digit'\r\n    })\r\n  }\r\n}\r\n\r\nconst getSessionStatusClass = (status) => {\r\n  switch (status) {\r\n    case 'active':\r\n      return 'bg-green-500/20 text-green-400 border-green-500/30'\r\n    case 'waiting':\r\n      return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30'\r\n    case 'closed':\r\n      return 'bg-gray-500/20 text-gray-400 border-gray-500/30'\r\n    default:\r\n      return 'bg-gray-500/20 text-gray-400 border-gray-500/30'\r\n  }\r\n}\r\n\r\nconst getSessionStatusText = (status) => {\r\n  switch (status) {\r\n    case 'active':\r\n      return '进行中'\r\n    case 'waiting':\r\n      return '等待中'\r\n    case 'closed':\r\n      return '已结束'\r\n    default:\r\n      return '未知'\r\n  }\r\n}\r\n\r\nconst getMessageAvatar = (message) => {\r\n  // 获取发送者头像，优先级：message.avatar > message.data.avatar\r\n  const avatar = message.avatar || message.data?.avatar\r\n  // 过滤掉空字符串和无效URL\r\n  if (avatar && avatar.trim() && avatar !== 'null' && avatar !== 'undefined') {\r\n    return avatar.trim()\r\n  }\r\n  return null\r\n}\r\n\r\nconst getMessageNickname = (message) => {\r\n  return message.nickname || message.data?.nickname || message.userName || message.data?.userName || '用户'\r\n}\r\n\r\nconst getUserAvatar = (message) => {\r\n  // 获取当前用户头像\r\n  const avatar = message.avatar || message.data?.avatar || userStore.user?.avatar\r\n  // 过滤掉空字符串和无效URL\r\n  if (avatar && avatar.trim() && avatar !== 'null' && avatar !== 'undefined') {\r\n    return avatar.trim()\r\n  }\r\n  return null\r\n}\r\n\r\nconst getUserNickname = (message) => {\r\n  return message.nickname || message.data?.nickname || message.userName || message.data?.userName || userStore.userDisplayName\r\n}\r\n\r\n// 头像错误处理\r\nconst handleAvatarError = (event) => {\r\n  console.log('头像加载失败:', event.target.src)\r\n  event.target.style.display = 'none'\r\n}\r\n\r\n// 头像加载成功处理\r\nconst handleAvatarLoad = (event) => {\r\n  console.log('头像加载成功:', event.target.src)\r\n}\r\n\r\n// 自动标记消息为已读\r\nconst autoMarkAsRead = async () => {\r\n  if (unreadCount.value > 0) {\r\n    try {\r\n      const response = await ChatApi.markMessagesAsRead()\r\n      if (response.success) {\r\n        unreadCount.value = 0\r\n        console.log('消息已自动标记为已读')\r\n      }\r\n    } catch (error) {\r\n      console.error('自动标记消息已读失败:', error)\r\n    }\r\n  }\r\n}\r\n\r\n// 选择会话\r\nconst selectSession = async (session) => {\r\n  console.log('选中用户会话:', session)\r\n  \r\n  // 清除之前的typing状态\r\n  clearTypingStates()\r\n  \r\n  selectedSession.value = session\r\n\r\n  // 加载该用户的聊天记录\r\n  await loadChatHistoryForSession(session.user_id)\r\n\r\n  // 标记该用户的消息为已读\r\n  if (session.unread_count > 0) {\r\n    await markSessionAsRead(session.user_id)\r\n    // 更新会话列表中的未读数量\r\n    session.unread_count = 0\r\n  }\r\n}\r\n\r\n// 加载特定会话的聊天记录\r\nconst loadChatHistoryForSession = async (sessionId) => {\r\n  try {\r\n    console.log('加载用户聊天记录:', sessionId)\r\n    // 使用新的 getUserMessages 接口\r\n    const response = await ChatApi.getUserMessages(sessionId, {\r\n      limit: 50\r\n    })\r\n\r\n    if (response.success && response.data) {\r\n      messages.value = response.data.map(msg => {\r\n        console.log('用户消息:', msg)\r\n\r\n        // 判断是否为客服消息的逻辑\r\n        const isCustomerService = msg.message_type === 'customer_service' ||\r\n          msg.role === 'admin' ||\r\n          msg.role === 'customer_service' ||\r\n          msg.is_admin_message === 1\r\n\r\n        const processedMsg = {\r\n          ...msg,\r\n          user_id: msg.user_id || msg.id,\r\n          isAdmin: isCustomerService,\r\n          avatar: msg.avatar,\r\n          nickname: msg.nickname || msg.username,\r\n          userName: msg.nickname || msg.username,\r\n          message_type: isCustomerService ? 'customer_service' : 'user'\r\n        }\r\n\r\n        return processedMsg\r\n      })\r\n\r\n      console.log('用户聊天记录加载完成:', messages.value)\r\n      scrollToBottom()\r\n    }\r\n  } catch (error) {\r\n    console.error('加载用户聊天记录失败:', error)\r\n    // 如果API不支持按用户加载，回退到加载全部记录\r\n    await loadChatHistory()\r\n  }\r\n}\r\n\r\n// 标记特定会话为已读\r\nconst markSessionAsRead = async (sessionId) => {\r\n  try {\r\n    const response = await ChatApi.markSessionAsRead(sessionId)\r\n    if (response.success) {\r\n      console.log('会话已标记为已读:', sessionId)\r\n      // 更新总的未读数量\r\n      await loadUnreadCount()\r\n    }\r\n  } catch (error) {\r\n    console.error('标记会话已读失败:', error)\r\n    // 如果API不支持，使用通用的标记已读\r\n    await autoMarkAsRead()\r\n  }\r\n}\r\n\r\n// 返回客服模式\r\nconst backToCustomerService = () => {\r\n  console.log('返回客服模式')\r\n  \r\n  // 清除typing状态\r\n  clearTypingStates()\r\n  \r\n  selectedSession.value = null\r\n  // 重新加载默认的聊天记录\r\n  loadChatHistory()\r\n}\r\n\r\n// 更新会话列表\r\nconst updateSessionList = (message) => {\r\n  const messageUserId = message.user_id\r\n  const sessionIndex = sessions.value.findIndex(s => s.user_id === messageUserId)\r\n\r\n  if (sessionIndex >= 0) {\r\n    // 更新现有会话\r\n    const session = sessions.value[sessionIndex]\r\n    session.last_message = message.message || message.data?.message\r\n    session.last_message_time = new Date().toISOString()\r\n\r\n    // 如果不是当前选中的会话且消息类型是用户消息，增加未读数量\r\n    if ((!selectedSession.value || selectedSession.value.user_id !== messageUserId) &&\r\n      message.message_type === 'user') {\r\n      session.unread_count = (session.unread_count || 0) + 1\r\n    }\r\n\r\n    // 将会话移到列表顶部\r\n    sessions.value.splice(sessionIndex, 1)\r\n    sessions.value.unshift(session)\r\n  } else if (message.message_type === 'user') {\r\n    // 新用户发送消息，重新加载会话列表\r\n    loadChatSessions()\r\n  }\r\n}\r\n\r\n// 检查登录状态和初始化\r\nonMounted(async () => {\r\n  if (!userStore.isLoggedIn) {\r\n    // 如果未登录，跳转到登录页面\r\n    navigateTo('/auth/login')\r\n    return\r\n  }\r\n\r\n  // 加载页面数据\r\n  await Promise.all([\r\n    loadServiceStatus(),\r\n    loadUnreadCount(),\r\n    loadChatHistory(),\r\n    loadChatSessions()\r\n  ])\r\n  connectWebSocket()\r\n})\r\n\r\nonUnmounted(() => {\r\n  disconnectWebSocket()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.glass-card-dark {\r\n  background: rgba(31, 41, 55, 0.8);\r\n  backdrop-filter: blur(20px);\r\n  -webkit-backdrop-filter: blur(20px);\r\n}\r\n\r\n/* 滚动条样式 */\r\n.overflow-y-auto::-webkit-scrollbar {\r\n  width: 6px;\r\n}\r\n\r\n.overflow-y-auto::-webkit-scrollbar-track {\r\n  background: rgba(55, 65, 81, 0.3);\r\n  border-radius: 3px;\r\n}\r\n\r\n.overflow-y-auto::-webkit-scrollbar-thumb {\r\n  background: rgba(156, 163, 175, 0.5);\r\n  border-radius: 3px;\r\n}\r\n\r\n.overflow-y-auto::-webkit-scrollbar-thumb:hover {\r\n  background: rgba(156, 163, 175, 0.7);\r\n}\r\n\r\n/* 隐藏输入框滚动条 */\r\n.hide-scrollbar {\r\n  /* 隐藏 Webkit 浏览器滚动条 */\r\n  -webkit-overflow-scrolling: touch;\r\n  scrollbar-width: none; /* Firefox */\r\n  -ms-overflow-style: none; /* IE 和 Edge */\r\n}\r\n\r\n.hide-scrollbar::-webkit-scrollbar {\r\n  display: none; /* Chrome, Safari, Opera */\r\n}\r\n\r\n/* 自定义动画 */\r\n@keyframes fadeInUp {\r\n  0% {\r\n    opacity: 0;\r\n    transform: translateY(30px);\r\n  }\r\n\r\n  100% {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n@keyframes fadeInLeft {\r\n  0% {\r\n    opacity: 0;\r\n    transform: translateX(-30px);\r\n  }\r\n\r\n  100% {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n  }\r\n}\r\n\r\n@keyframes fadeInRight {\r\n  0% {\r\n    opacity: 0;\r\n    transform: translateX(30px);\r\n  }\r\n\r\n  100% {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n  }\r\n}\r\n\r\n@keyframes bounceGentle {\r\n\r\n  0%,\r\n  20%,\r\n  50%,\r\n  80%,\r\n  100% {\r\n    transform: translateY(0);\r\n  }\r\n\r\n  40% {\r\n    transform: translateY(-3px);\r\n  }\r\n\r\n  60% {\r\n    transform: translateY(-2px);\r\n  }\r\n}\r\n\r\n@keyframes pulseGentle {\r\n\r\n  0%,\r\n  100% {\r\n    transform: scale(1);\r\n    opacity: 1;\r\n  }\r\n\r\n  50% {\r\n    transform: scale(1.05);\r\n    opacity: 0.8;\r\n  }\r\n}\r\n\r\n@keyframes bounce {\r\n\r\n  0%,\r\n  20%,\r\n  53%,\r\n  80%,\r\n  100% {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n\r\n  40%,\r\n  43% {\r\n    transform: translate3d(0, -8px, 0);\r\n  }\r\n\r\n  70% {\r\n    transform: translate3d(0, -4px, 0);\r\n  }\r\n\r\n  90% {\r\n    transform: translate3d(0, -2px, 0);\r\n  }\r\n}\r\n\r\n/* 动画类 */\r\n.animate-fade-in-up {\r\n  animation: fadeInUp 0.8s ease-out forwards;\r\n}\r\n\r\n.animate-fade-in-left {\r\n  animation: fadeInLeft 0.8s ease-out forwards;\r\n  animation-delay: 0.2s;\r\n  opacity: 0;\r\n}\r\n\r\n.animate-fade-in-right {\r\n  animation: fadeInRight 0.8s ease-out forwards;\r\n  animation-delay: 0.3s;\r\n  opacity: 0;\r\n}\r\n\r\n.animate-bounce-gentle {\r\n  animation: bounceGentle 2s ease-in-out infinite;\r\n}\r\n\r\n.animate-pulse-gentle {\r\n  animation: pulseGentle 2s ease-in-out infinite;\r\n}\r\n\r\n.animate-bounce {\r\n  animation: bounce 1s infinite;\r\n}\r\n\r\n/* 消息动画 */\r\n.message-enter-active {\r\n  transition: all 0.5s ease-out;\r\n}\r\n\r\n.message-enter-from {\r\n  opacity: 0;\r\n  transform: translateY(20px) scale(0.9);\r\n}\r\n\r\n.message-enter-to {\r\n  opacity: 1;\r\n  transform: translateY(0) scale(1);\r\n}\r\n\r\n/* 会话选中状态优化 */\r\n.session-selected {\r\n  background: linear-gradient(135deg, rgba(6, 182, 212, 0.15) 0%, rgba(59, 130, 246, 0.15) 100%);\r\n  border: 1px solid rgba(6, 182, 212, 0.4);\r\n  box-shadow: 0 0 20px rgba(6, 182, 212, 0.2);\r\n}\r\n\r\n.session-selected::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  border-radius: 12px;\r\n  background: linear-gradient(135deg, rgba(6, 182, 212, 0.1) 0%, rgba(59, 130, 246, 0.1) 100%);\r\n  pointer-events: none;\r\n  z-index: -1;\r\n}\r\n\r\n/* 响应式设计优化 */\r\n@media (max-width: 1280px) {\r\n\r\n  .xl\\\\:col-span-1,\r\n  .xl\\\\:col-span-3 {\r\n    grid-column: span 1;\r\n  }\r\n\r\n  .grid.xl\\\\:grid-cols-4 {\r\n    grid-template-columns: repeat(1, minmax(0, 1fr));\r\n    gap: 1rem;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n\r\n  .animate-fade-in-left,\r\n  .animate-fade-in-right {\r\n    animation-delay: 0.1s;\r\n  }\r\n\r\n  .h-\\\\[750px\\\\] {\r\n    height: 500px;\r\n  }\r\n\r\n  .px-6 {\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n  }\r\n\r\n  .py-8 {\r\n    padding-top: 1.5rem;\r\n    padding-bottom: 1.5rem;\r\n  }\r\n\r\n  .text-4xl {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  .text-2xl {\r\n    font-size: 1.5rem;\r\n  }\r\n}\r\n</style>"],"names":["_ssrRenderAttrs","_mergeProps","_ssrRenderClass","_ssrInterpolate","_ssrRenderList"],"mappings":"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"}