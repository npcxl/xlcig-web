{"file":"address-CU5h3OeV.js","mappings":"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","names":[],"sources":["../../../../stores/address.ts"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { addressApi } from '../utils/api/addresses'\r\nimport type { Address, AddressCreateInput, AddressUpdateInput } from '../types/api'\r\n\r\nexport interface AddressState {\r\n  addresses: Address[]\r\n  defaultAddress: Address | null\r\n  isLoading: boolean\r\n  isInitialized: boolean\r\n  lastUpdated: Date | null\r\n}\r\n\r\nexport const useAddressStore = defineStore('address', {\r\n  state: (): AddressState => ({\r\n    addresses: [],\r\n    defaultAddress: null,\r\n    isLoading: false,\r\n    isInitialized: false,\r\n    lastUpdated: null\r\n  }),\r\n\r\n  getters: {\r\n    // 获取默认地址\r\n    getDefaultAddress: (state): Address | null => {\r\n      return state.defaultAddress || state.addresses.find(addr => addr.is_default) || null\r\n    },\r\n\r\n    // 获取非默认地址列表\r\n    getNonDefaultAddresses: (state): Address[] => {\r\n      return state.addresses.filter(addr => !addr.is_default)\r\n    },\r\n\r\n    // 获取地址总数\r\n    addressCount: (state): number => {\r\n      return state.addresses.length\r\n    },\r\n\r\n    // 检查是否有地址\r\n    hasAddresses: (state): boolean => {\r\n      return state.addresses.length > 0\r\n    },\r\n\r\n    // 根据ID获取地址\r\n    getAddressById: (state) => (id: number): Address | null => {\r\n      return state.addresses.find(addr => addr.id === id) || null\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    // 初始化地址数据\r\n    async initializeAddresses() {\r\n      if (this.isInitialized) return\r\n      \r\n      try {\r\n        this.isLoading = true\r\n        await this.fetchAddresses()\r\n        this.isInitialized = true\r\n      } catch (error) {\r\n        console.error('初始化地址数据失败:', error)\r\n        throw error\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n\r\n    // 获取地址列表\r\n    async fetchAddresses() {\r\n      try {\r\n        this.isLoading = true\r\n        const response = await addressApi.getAddresses()\r\n        \r\n        if (response.success && response.data) {\r\n          this.addresses = response.data\r\n          this.defaultAddress = response.data.find(addr => addr.is_default) || null\r\n          this.lastUpdated = new Date()\r\n        }\r\n      } catch (error) {\r\n        console.error('获取地址列表失败:', error)\r\n        throw error\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n\r\n    // 添加新地址\r\n    async addAddress(addressData: AddressCreateInput) {\r\n      try {\r\n        const response = await addressApi.createAddress(addressData)\r\n        \r\n        if (response.success && response.data) {\r\n          this.addresses.push(response.data)\r\n          \r\n          // 如果是默认地址，更新默认地址状态\r\n          if (response.data.is_default) {\r\n            // 将其他地址设为非默认\r\n            this.addresses.forEach(addr => {\r\n              if (addr.id !== response.data!.id) {\r\n                addr.is_default = false\r\n              }\r\n            })\r\n            this.defaultAddress = response.data\r\n          }\r\n          \r\n          this.lastUpdated = new Date()\r\n          return response.data\r\n        }\r\n        \r\n        throw new Error(response.message || '添加地址失败')\r\n      } catch (error) {\r\n        console.error('添加地址失败:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    // 更新地址\r\n    async updateAddress(id: number, addressData: AddressUpdateInput) {\r\n      try {\r\n        const response = await addressApi.updateAddress(id, addressData)\r\n        \r\n        if (response.success && response.data) {\r\n          const index = this.addresses.findIndex(addr => addr.id === id)\r\n          if (index !== -1) {\r\n            this.addresses[index] = response.data\r\n            \r\n            // 更新默认地址\r\n            if (response.data.is_default) {\r\n              this.addresses.forEach(addr => {\r\n                if (addr.id !== id) {\r\n                  addr.is_default = false\r\n                }\r\n              })\r\n              this.defaultAddress = response.data\r\n            }\r\n          }\r\n          \r\n          this.lastUpdated = new Date()\r\n          return response.data\r\n        }\r\n        \r\n        throw new Error(response.message || '更新地址失败')\r\n      } catch (error) {\r\n        console.error('更新地址失败:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    // 设置默认地址\r\n    async setDefaultAddress(id: number) {\r\n      try {\r\n        const response = await addressApi.setDefaultAddress(id)\r\n        \r\n        if (response.success) {\r\n          // 更新本地状态\r\n          this.addresses.forEach(addr => {\r\n            addr.is_default = addr.id === id\r\n          })\r\n          \r\n          this.defaultAddress = this.addresses.find(addr => addr.id === id) || null\r\n          this.lastUpdated = new Date()\r\n        }\r\n        \r\n        return response.success\r\n      } catch (error) {\r\n        console.error('设置默认地址失败:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    // 删除地址\r\n    async deleteAddress(id: number) {\r\n      try {\r\n        const response = await addressApi.deleteAddress(id)\r\n        \r\n        if (response.success) {\r\n          this.addresses = this.addresses.filter(addr => addr.id !== id)\r\n          \r\n          // 如果删除的是默认地址，清除默认地址状态\r\n          if (this.defaultAddress?.id === id) {\r\n            this.defaultAddress = null\r\n          }\r\n          \r\n          this.lastUpdated = new Date()\r\n        }\r\n        \r\n        return response.success\r\n      } catch (error) {\r\n        console.error('删除地址失败:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    // 清空地址数据\r\n    clearAddresses() {\r\n      this.addresses = []\r\n      this.defaultAddress = null\r\n      this.isInitialized = false\r\n      this.lastUpdated = null\r\n    },\r\n\r\n    // 强制刷新地址数据\r\n    async refreshAddresses() {\r\n      this.isInitialized = false\r\n      await this.initializeAddresses()\r\n    }\r\n  }\r\n}) "],"version":3}