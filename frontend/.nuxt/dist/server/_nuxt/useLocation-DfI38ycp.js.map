{"version":3,"file":"useLocation-DfI38ycp.js","sources":["../../../../utils/api/location.ts","../../../../composables/useMessage.ts","../../../../composables/useLocation.ts"],"sourcesContent":["import { apiClient } from '../apiClient'\r\nimport type { ApiResponse } from '../../types/api'\r\n\r\n// IP定位相关类型\r\nexport interface IpLocationResponse {\r\n  ip: string\r\n  location: {\r\n    ip: string\r\n    province?: string\r\n    city?: string\r\n    adcode?: string\r\n    rectangle?: string\r\n    response_time: string\r\n    error?: string\r\n    error_code?: string\r\n    error_details?: string\r\n  }\r\n  cached: boolean\r\n  user?: {\r\n    id: number\r\n    locationUpdated: boolean  // 用户的登录IP和定位信息是否已更新\r\n  } | null\r\n}\r\n\r\n// IP定位API类\r\nexport class LocationApi {\r\n  /**\r\n   * 获取当前用户的IP定位信息\r\n   * 如果用户已登录，会自动更新用户的loginIp字段\r\n   */\r\n  static async getIpLocation(): Promise<ApiResponse<IpLocationResponse>> {\r\n    try {\r\n      const response = await apiClient.get<IpLocationResponse>('/amap/ip/')\r\n      \r\n      // 如果成功获取定位信息，可以在这里做一些处理\r\n      if (response.success && response.data) {\r\n        const { location, user } = response.data\r\n        \r\n        // 输出定位信息到控制台（开发环境）\r\n        if (process.env.NODE_ENV === 'development') {\r\n          console.log('🌍 IP定位信息:', {\r\n            ip: location.ip,\r\n            location: location.error ? '定位失败' : `${location.province || '未知'} ${location.city || ''}`,\r\n            cached: response.data.cached,\r\n            userUpdated: user?.locationUpdated || false\r\n          })\r\n        }\r\n      }\r\n      \r\n      return response\r\n    } catch (error) {\r\n      console.error('获取IP定位失败:', error)\r\n      throw error\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 强制刷新IP定位信息（忽略缓存）\r\n   * 注意：这会直接调用高德地图API，请谨慎使用\r\n   */\r\n  static async refreshIpLocation(): Promise<ApiResponse<IpLocationResponse>> {\r\n    try {\r\n      // 可以添加时间戳参数来避免缓存\r\n      const timestamp = new Date().getTime()\r\n      const response = await apiClient.get<IpLocationResponse>(`/amap/ip/?t=${timestamp}`)\r\n      \r\n      if (process.env.NODE_ENV === 'development') {\r\n        console.log('🔄 强制刷新IP定位信息')\r\n      }\r\n      \r\n      return response\r\n    } catch (error) {\r\n      console.error('刷新IP定位失败:', error)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\n// 导出方便使用的函数\r\nexport const getIpLocation = LocationApi.getIpLocation\r\nexport const refreshIpLocation = LocationApi.refreshIpLocation\r\n\r\nexport default LocationApi ","import { createDiscreteApi } from 'naive-ui'\r\n\r\n// 创建独立的消息API实例\r\nconst { message, notification, dialog, loadingBar } = createDiscreteApi([\r\n  'message',\r\n  'notification', \r\n  'dialog',\r\n  'loadingBar'\r\n])\r\n\r\nexport const useMessage = () => {\r\n  // 成功消息\r\n  const success = (content: string, duration = 3000) => {\r\n    message.success(content, { duration })\r\n  }\r\n\r\n  // 错误消息  \r\n  const error = (content: string, duration = 4000) => {\r\n    message.error(content, { duration })\r\n  }\r\n\r\n  // 警告消息\r\n  const warning = (content: string, duration = 3000) => {\r\n    message.warning(content, { duration })\r\n  }\r\n\r\n  // 普通消息\r\n  const info = (content: string, duration = 3000) => {\r\n    message.info(content, { duration })\r\n  }\r\n\r\n  // 加载中消息\r\n  const loading = (content: string) => {\r\n    return message.loading(content, { duration: 0 })\r\n  }\r\n\r\n  // 确认对话框\r\n  const confirm = (content: string, title = '确认'): Promise<boolean> => {\r\n    return new Promise((resolve) => {\r\n      dialog.warning({\r\n        title,\r\n        content,\r\n        positiveText: '确定',\r\n        negativeText: '取消',\r\n        onPositiveClick: () => {\r\n          resolve(true)\r\n        },\r\n        onNegativeClick: () => {\r\n          resolve(false)\r\n        },\r\n        onClose: () => {\r\n          resolve(false)\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  // 通知\r\n  const notify = {\r\n    success: (title: string, content?: string, duration = 4000) => {\r\n      notification.success({\r\n        title,\r\n        content,\r\n        duration\r\n      })\r\n    },\r\n    error: (title: string, content?: string, duration = 4000) => {\r\n      notification.error({\r\n        title,\r\n        content,\r\n        duration\r\n      })\r\n    },\r\n    warning: (title: string, content?: string, duration = 4000) => {\r\n      notification.warning({\r\n        title,\r\n        content,\r\n        duration\r\n      })\r\n    },\r\n    info: (title: string, content?: string, duration = 4000) => {\r\n      notification.info({\r\n        title,\r\n        content,\r\n        duration\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    success,\r\n    error,\r\n    warning,\r\n    info,\r\n    loading,\r\n    confirm,\r\n    notify,\r\n    loadingBar\r\n  }\r\n} ","import { ref, reactive, computed, toRefs, readonly } from 'vue'\r\nimport { getIpLocation, refreshIpLocation, type IpLocationResponse } from '../utils/api/location'\r\nimport { useMessage } from './useMessage'\r\nimport { useUserStore } from '../stores/user'\r\n\r\n// IP定位状态类型\r\ninterface LocationState {\r\n  loading: boolean\r\n  data: IpLocationResponse | null\r\n  error: string | null\r\n  lastUpdated: Date | null\r\n}\r\n\r\nexport const useLocation = () => {\r\n  const { success, error, warning } = useMessage()\r\n  const userStore = useUserStore()\r\n  \r\n  // 响应式状态\r\n  const state = reactive<LocationState>({\r\n    loading: false,\r\n    data: null,\r\n    error: null,\r\n    lastUpdated: null\r\n  })\r\n  \r\n  // 是否自动获取过定位\r\n  const hasAutoFetched = ref(false)\r\n  \r\n  /**\r\n   * 获取IP定位信息\r\n   * @param showNotification 是否显示通知消息\r\n   * @param forceRefresh 是否强制刷新（忽略缓存）\r\n   */\r\n  const fetchLocation = async (showNotification = false, forceRefresh = false) => {\r\n    if (state.loading) return state.data\r\n    \r\n    state.loading = true\r\n    state.error = null\r\n    \r\n    try {\r\n      // 前端检查：只有登录用户才调用API进行数据库更新\r\n      const isLoggedIn = userStore.isLoggedIn\r\n      \r\n      if (showNotification && !isLoggedIn) {\r\n        warning('请先登录以启用完整的IP定位功能')\r\n      }\r\n      \r\n      const response = forceRefresh \r\n        ? await refreshIpLocation() \r\n        : await getIpLocation()\r\n      \r\n      if (response.success && response.data) {\r\n        state.data = response.data\r\n        state.lastUpdated = new Date()\r\n        \r\n        if (showNotification) {\r\n          const { location, user } = response.data\r\n          if (location.error) {\r\n            warning('IP定位失败: ' + location.error)\r\n          } else {\r\n            const locationText = `${location.province || '未知地区'} ${location.city || ''}`\r\n            const cacheText = response.data.cached ? '(缓存)' : ''\r\n            \r\n            if (isLoggedIn && user?.locationUpdated) {\r\n              success(`定位成功: ${locationText}${cacheText}，登录信息已更新`)\r\n            } else if (isLoggedIn && !user?.locationUpdated) {\r\n              warning(`定位成功: ${locationText}${cacheText}，但登录信息未更新`)\r\n            } else {\r\n              success(`定位成功: ${locationText}${cacheText}（未登录状态）`)\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        state.error = response.message || '获取定位信息失败'\r\n        if (showNotification) {\r\n          error(state.error)\r\n        }\r\n      }\r\n      \r\n      return state.data\r\n    } catch (err: any) {\r\n      state.error = err.message || '网络错误'\r\n      if (showNotification) {\r\n        error('获取定位信息失败')\r\n      }\r\n      console.error('IP定位错误:', err)\r\n      return null\r\n    } finally {\r\n      state.loading = false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 自动获取定位信息（仅在首次调用时执行）\r\n   * 适用于在应用启动时自动获取定位\r\n   */\r\n  const autoFetchLocation = async () => {\r\n    if (hasAutoFetched.value) return state.data\r\n    \r\n    hasAutoFetched.value = true\r\n    \r\n    // 确保用户store已初始化\r\n    userStore.initializeAuth()\r\n    \r\n    return await fetchLocation(false, false)\r\n  }\r\n  \r\n  /**\r\n   * 强制刷新定位信息\r\n   */\r\n  const refreshLocation = async (showNotification = true) => {\r\n    return await fetchLocation(showNotification, true)\r\n  }\r\n  \r\n  /**\r\n   * 获取当前定位的文本描述\r\n   */\r\n  const getLocationText = () => {\r\n    if (!state.data?.location) return '未知位置'\r\n    \r\n    const { location } = state.data\r\n    if (location.error) return '定位失败'\r\n    \r\n    return `${location.province || '未知'} ${location.city || ''}`\r\n  }\r\n  \r\n  /**\r\n   * 检查是否有定位数据\r\n   */\r\n  const hasLocation = computed(() => {\r\n    return !!(state.data?.location && !state.data.location.error)\r\n  })\r\n  \r\n  /**\r\n   * 检查用户是否已登录且登录IP已更新\r\n   */\r\n  const isUserLocationUpdated = computed(() => {\r\n    return !!(state.data?.user?.locationUpdated)\r\n  })\r\n  \r\n  /**\r\n   * 获取IP地址\r\n   */\r\n  const currentIp = computed(() => {\r\n    return state.data?.ip || '未知'\r\n  })\r\n  \r\n  /**\r\n   * 检查用户登录状态（前端判断）\r\n   */\r\n  const isUserLoggedIn = computed(() => {\r\n    return userStore.isLoggedIn\r\n  })\r\n  \r\n  return {\r\n    // 状态\r\n    ...toRefs(state),\r\n    hasAutoFetched: readonly(hasAutoFetched),\r\n    \r\n    // 方法\r\n    fetchLocation,\r\n    autoFetchLocation,\r\n    refreshLocation,\r\n    getLocationText,\r\n    \r\n    // 计算属性\r\n    hasLocation,\r\n    isUserLocationUpdated,\r\n    currentIp,\r\n    isUserLoggedIn,\r\n    \r\n    // 原始状态（用于需要完整状态的场景）\r\n    locationState: readonly(state)\r\n  }\r\n} "],"names":[],"mappings":"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"}