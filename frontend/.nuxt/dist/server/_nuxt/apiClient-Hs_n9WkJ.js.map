{"version":3,"file":"apiClient-Hs_n9WkJ.js","sources":["../../../../utils/interceptors.ts","../../../../utils/apiClient.ts"],"sourcesContent":["// API拦截器\r\n\r\n// 获取认证token\r\nexport const getAuthToken = (): string | null => {\r\n  if (typeof window !== 'undefined') {\r\n    return localStorage.getItem('authToken')\r\n  }\r\n  return null\r\n}\r\n\r\n// 请求拦截器接口\r\nexport interface RequestInterceptorConfig {\r\n  headers?: Record<string, string>\r\n  requireAuth?: boolean\r\n  timeout?: number\r\n}\r\n\r\n// 请求拦截器\r\nexport const requestInterceptor = async (\r\n  url: string, \r\n  config: RequestInit & RequestInterceptorConfig\r\n): Promise<RequestInit> => {\r\n  const headers: Record<string, string> = { \r\n    ...config.headers \r\n  }\r\n  \r\n  // 只有当不是FormData时才设置Content-Type\r\n  if (!(config.body instanceof FormData)) {\r\n    headers['Content-Type'] = 'application/json'\r\n  }\r\n  \r\n  // 如果需要认证，添加token\r\n  if (config.requireAuth !== false) {\r\n    const token = getAuthToken()\r\n    if (token) {\r\n      headers['Authorization'] = `Bearer ${token}`\r\n    }\r\n  }\r\n\r\n  const requestConfig: RequestInit = {\r\n    ...config,\r\n    headers,\r\n    signal: AbortSignal.timeout(config.timeout || 10000)\r\n  }\r\n\r\n  // 处理请求体\r\n  if (config.body && config.method !== 'GET') {\r\n    if (typeof config.body === 'object' && !(config.body instanceof FormData)) {\r\n      requestConfig.body = JSON.stringify(config.body)\r\n    }\r\n  }\r\n\r\n  return requestConfig\r\n}\r\n\r\n// 响应拦截器\r\nexport const responseInterceptor = async <T>(response: Response): Promise<T> => {\r\n  let data: any\r\n\r\n  try {\r\n    const contentType = response.headers.get('content-type')\r\n    if (contentType && contentType.includes('application/json')) {\r\n      data = await response.json()\r\n    } else {\r\n      data = await response.text()\r\n    }\r\n  } catch (error) {\r\n    throw new Error('响应解析失败')\r\n  }\r\n\r\n  // 处理HTTP错误状态\r\n  if (!response.ok) {\r\n    // 401 未授权 - 清除token并跳转登录\r\n    if (response.status === 401) {\r\n      if (typeof window !== 'undefined') {\r\n        localStorage.removeItem('authToken')\r\n        localStorage.removeItem('userInfo')\r\n        // 如果不在登录页面，跳转到登录页面\r\n        if (window.location.pathname !== '/auth/login') {\r\n          window.location.href = '/auth/login'\r\n        }\r\n      }\r\n    }\r\n\r\n    // 抛出错误信息\r\n    const errorMessage = data?.message || data?.error || `HTTP ${response.status}: ${response.statusText}`\r\n    throw new Error(errorMessage)\r\n  }\r\n\r\n  return data\r\n}\r\n\r\n// 错误处理拦截器\r\nexport const errorInterceptor = (error: any, method: string, endpoint: string): never => {\r\n  console.error(`API请求失败 [${method} ${endpoint}]:`, error)\r\n  \r\n  if (error instanceof Error) {\r\n    if (error.name === 'TimeoutError') {\r\n      throw new Error('请求超时，请检查网络连接')\r\n    }\r\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n      throw new Error('网络连接失败，请检查网络状态')\r\n    }\r\n    throw error\r\n  }\r\n  \r\n  throw new Error('请求失败，请重试')\r\n} ","import { requestInterceptor, responseInterceptor, errorInterceptor, RequestInterceptorConfig } from './interceptors'\r\nimport type { ApiResponse } from '../types/api'\r\n\r\n// API配置 - 根据环境确定API地址\r\nconst API_CONFIG = {\r\n  BASE_URL: process.env.NODE_ENV === 'production' \r\n    ? 'https://api.xlcig.cn/api' \r\n    : 'http://192.168.11.193:9999/api',\r\n  TIMEOUT: 10000\r\n}\r\n\r\n// HTTP请求方法类型\r\ntype HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH'\r\n\r\n// API客户端类\r\nclass ApiClient {\r\n  private baseURL: string\r\n  private timeout: number\r\n\r\n  constructor() {\r\n    this.baseURL = API_CONFIG.BASE_URL\r\n    this.timeout = API_CONFIG.TIMEOUT\r\n  }\r\n\r\n  // 统一请求方法\r\n  async request<T = any>(\r\n    endpoint: string, \r\n    config: RequestInit & RequestInterceptorConfig = {}\r\n  ): Promise<ApiResponse<T>> {\r\n    const url = `${this.baseURL}${endpoint.startsWith('/') ? endpoint : '/' + endpoint}`\r\n    const method = (config.method || 'GET') as HttpMethod\r\n    \r\n    try {\r\n      // 应用请求拦截器\r\n      const requestConfig = await requestInterceptor(url, {\r\n        timeout: this.timeout,\r\n        ...config\r\n      })\r\n      // 发送请求\r\n      const response = await fetch(url, requestConfig)\r\n      // 应用响应拦截器\r\n      return await responseInterceptor<ApiResponse<T>>(response)\r\n    } catch (error) {\r\n      // 应用错误拦截器\r\n      return errorInterceptor(error, method, endpoint)\r\n    }\r\n  }\r\n\r\n  // GET请求\r\n  async get<T = any>(\r\n    endpoint: string, \r\n    config?: Omit<RequestInterceptorConfig, 'method'>\r\n  ): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, { ...config, method: 'GET' })\r\n  }\r\n\r\n  // POST请求\r\n  async post<T = any>(\r\n    endpoint: string, \r\n    body?: any, \r\n    config?: Omit<RequestInterceptorConfig, 'method' | 'body'>\r\n  ): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, { ...config, method: 'POST', body })\r\n  }\r\n\r\n  // PUT请求\r\n  async put<T = any>(\r\n    endpoint: string, \r\n    body?: any, \r\n    config?: Omit<RequestInterceptorConfig, 'method' | 'body'>\r\n  ): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, { ...config, method: 'PUT', body })\r\n  }\r\n\r\n  // DELETE请求\r\n  async delete<T = any>(\r\n    endpoint: string, \r\n    config?: Omit<RequestInterceptorConfig, 'method'>\r\n  ): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, { ...config, method: 'DELETE' })\r\n  }\r\n\r\n  // PATCH请求\r\n  async patch<T = any>(\r\n    endpoint: string, \r\n    body?: any, \r\n    config?: Omit<RequestInterceptorConfig, 'method' | 'body'>\r\n  ): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, { ...config, method: 'PATCH', body })\r\n  }\r\n\r\n  // 带查询参数的GET请求\r\n  async getWithParams<T = any>(\r\n    endpoint: string,\r\n    params?: Record<string, any>,\r\n    config?: Omit<RequestInterceptorConfig, 'method'>\r\n  ): Promise<ApiResponse<T>> {\r\n    let url = endpoint\r\n    \r\n    if (params) {\r\n      const searchParams = new URLSearchParams()\r\n      Object.entries(params).forEach(([key, value]) => {\r\n        if (value !== undefined && value !== null && value !== '') {\r\n          if (Array.isArray(value)) {\r\n            value.forEach(item => searchParams.append(key, String(item)))\r\n          } else {\r\n            searchParams.append(key, String(value))\r\n          }\r\n        }\r\n      })\r\n      \r\n      if (searchParams.toString()) {\r\n        url += `?${searchParams.toString()}`\r\n      }\r\n    }\r\n    \r\n    return this.get<T>(url, config)\r\n  }\r\n\r\n  // 上传文件\r\n  async upload<T = any>(\r\n    endpoint: string,\r\n    formData: FormData,\r\n    config?: Omit<RequestInterceptorConfig, 'method' | 'body'>\r\n  ): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, {\r\n      ...config,\r\n      method: 'POST',\r\n      body: formData,\r\n      headers: {\r\n        // 不设置Content-Type，让浏览器自动设置multipart/form-data\r\n        ...(config?.headers || {})\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// 创建并导出API客户端实例\r\nexport const apiClient = new ApiClient()\r\nexport default apiClient "],"names":[],"mappings":"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"}