{"version":3,"file":"user-C81snHaJ.js","sources":["../../../../stores/user.ts"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport type { User } from '../utils/api'\r\n\r\nexport interface UserState {\r\n  isLoggedIn: boolean\r\n  user: User | null\r\n  token: string | null\r\n}\r\n\r\nexport const useUserStore = defineStore('user', {\r\n  state: (): UserState => ({\r\n    isLoggedIn: false,\r\n    user: null,\r\n    token: null\r\n  }),\r\n\r\n  getters: {\r\n    // 获取用户头像，优先返回头像URL，否则返回首字母\r\n    userAvatar: (state): string => {\r\n      if (state.user?.avatar) {\r\n        return state.user.avatar\r\n      }\r\n      const displayName = state.user?.nickname || state.user?.username || 'U'\r\n      return displayName.charAt(0).toUpperCase()\r\n    },\r\n\r\n    // 获取用户显示名称\r\n    userDisplayName: (state): string => {\r\n      return state.user?.nickname || state.user?.username || '用户'\r\n    },\r\n\r\n    // 检查是否有真实头像图片\r\n    hasAvatarImage: (state): boolean => {\r\n      return !!state.user?.avatar\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    // 初始化用户状态（从localStorage加载）\r\n    initializeAuth() {\r\n      if (typeof window !== 'undefined') {\r\n        try {\r\n          const token = localStorage.getItem('authToken')\r\n          const userInfo = localStorage.getItem('userInfo')\r\n          \r\n          if (token && userInfo) {\r\n            this.token = token\r\n            this.user = JSON.parse(userInfo)\r\n            this.isLoggedIn = true\r\n          } else {\r\n            this.clearAuth()\r\n          }\r\n        } catch (error) {\r\n          console.error('初始化用户状态失败:', error)\r\n          this.clearAuth()\r\n        }\r\n      }\r\n    },\r\n\r\n    // 设置用户登录状态\r\n    setAuth(token: string, user: User) {\r\n      this.token = token\r\n      this.user = user\r\n      this.isLoggedIn = true\r\n      \r\n      // 同步到localStorage\r\n      if (typeof window !== 'undefined') {\r\n        localStorage.setItem('authToken', token)\r\n        localStorage.setItem('userInfo', JSON.stringify(user))\r\n      }\r\n    },\r\n\r\n    // 更新用户信息\r\n    updateUser(user: User) {\r\n      this.user = user\r\n      \r\n      // 同步到localStorage\r\n      if (typeof window !== 'undefined') {\r\n        localStorage.setItem('userInfo', JSON.stringify(user))\r\n      }\r\n    },\r\n\r\n    // 清除用户状态\r\n    clearAuth() {\r\n      this.token = null\r\n      this.user = null\r\n      this.isLoggedIn = false\r\n      \r\n      // 清除localStorage\r\n      if (typeof window !== 'undefined') {\r\n        localStorage.removeItem('authToken')\r\n        localStorage.removeItem('userInfo')\r\n      }\r\n    },\r\n\r\n    // 登出\r\n    logout() {\r\n      this.clearAuth()\r\n      \r\n      // 可以在这里添加登出后的跳转逻辑\r\n      if (typeof window !== 'undefined') {\r\n        window.location.href = '/auth/login'\r\n      }\r\n    }\r\n  }\r\n}) "],"names":[],"mappings":";AASO,MAAM,eAAe,YAAY,QAAQ;AAAA,EAC9C,OAAO,OAAkB;AAAA,IACvB,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,OAAO;AAAA,EAAA;AAAA,EAGT,SAAS;AAAA;AAAA,IAEP,YAAY,CAAC,UAAkB;;AAC7B,WAAI,WAAM,SAAN,mBAAY,QAAQ;AACtB,eAAO,MAAM,KAAK;AAAA,MAAA;AAEpB,YAAM,gBAAc,WAAM,SAAN,mBAAY,eAAY,WAAM,SAAN,mBAAY,aAAY;AACpE,aAAO,YAAY,OAAO,CAAC,EAAE,YAAA;AAAA,IAAY;AAAA;AAAA,IAI3C,iBAAiB,CAAC,UAAkB;;AAClC,eAAO,WAAM,SAAN,mBAAY,eAAY,WAAM,SAAN,mBAAY,aAAY;AAAA,IAAA;AAAA;AAAA,IAIzD,gBAAgB,CAAC,UAAmB;;AAClC,aAAO,CAAC,GAAC,WAAM,SAAN,mBAAY;AAAA,IAAA;AAAA,EACvB;AAAA,EAGF,SAAS;AAAA;AAAA,IAEP,iBAAiB;AAAA,IAiBf;AAAA;AAAA,IAIF,QAAQ,OAAe,MAAY;AACjC,WAAK,QAAQ;AACb,WAAK,OAAO;AACZ,WAAK,aAAa;AAAA,IAMlB;AAAA;AAAA,IAIF,WAAW,MAAY;AACrB,WAAK,OAAO;AAAA,IAKZ;AAAA;AAAA,IAIF,YAAY;AACV,WAAK,QAAQ;AACb,WAAK,OAAO;AACZ,WAAK,aAAa;AAAA,IAMlB;AAAA;AAAA,IAIF,SAAS;AACP,WAAK,UAAA;AAAA,IAKL;AAAA,EACF;AAEJ,CAAC;"}