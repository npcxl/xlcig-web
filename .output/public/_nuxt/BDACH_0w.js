const c=()=>typeof window<"u"?localStorage.getItem("authToken"):null,d=async(o,t)=>{const e={...t.headers};if(t.body instanceof FormData||(e["Content-Type"]="application/json"),t.requireAuth!==!1){const n=c();n&&(e.Authorization=`Bearer ${n}`)}const r={...t,headers:e,signal:AbortSignal.timeout(t.timeout||1e4)};return t.body&&t.method!=="GET"&&typeof t.body=="object"&&!(t.body instanceof FormData)&&(r.body=JSON.stringify(t.body)),r},l=async o=>{let t;try{const e=o.headers.get("content-type");e&&e.includes("application/json")?t=await o.json():t=await o.text()}catch{throw new Error("响应解析失败")}if(!o.ok){o.status===401&&typeof window<"u"&&(localStorage.removeItem("authToken"),localStorage.removeItem("userInfo"),window.location.pathname!=="/auth/login"&&(window.location.href="/auth/login"));const e=(t==null?void 0:t.message)||(t==null?void 0:t.error)||`HTTP ${o.status}: ${o.statusText}`;throw new Error(e)}return t},m=(o,t,e)=>{throw console.error(`API请求失败 [${t} ${e}]:`,o),o instanceof Error?o.name==="TimeoutError"?new Error("请求超时，请检查网络连接"):o.name==="TypeError"&&o.message.includes("fetch")?new Error("网络连接失败，请检查网络状态"):o:new Error("请求失败，请重试")},h={BASE_URL:"https://api.xlcig.cn/api",TIMEOUT:1e4};class y{constructor(){this.baseURL=h.BASE_URL,this.timeout=h.TIMEOUT}async request(t,e={}){const r=`${this.baseURL}${t.startsWith("/")?t:"/"+t}`,n=e.method||"GET";try{const s=await d(r,{timeout:this.timeout,...e}),i=await fetch(r,s);return await l(i)}catch(s){return m(s,n,t)}}async get(t,e){return this.request(t,{...e,method:"GET"})}async post(t,e,r){return this.request(t,{...r,method:"POST",body:e})}async put(t,e,r){return this.request(t,{...r,method:"PUT",body:e})}async delete(t,e){return this.request(t,{...e,method:"DELETE"})}async patch(t,e,r){return this.request(t,{...r,method:"PATCH",body:e})}async getWithParams(t,e,r){let n=t;if(e){const s=new URLSearchParams;Object.entries(e).forEach(([i,a])=>{a!=null&&a!==""&&(Array.isArray(a)?a.forEach(u=>s.append(i,String(u))):s.append(i,String(a)))}),s.toString()&&(n+=`?${s.toString()}`)}return this.get(n,r)}async upload(t,e,r){return this.request(t,{...r,method:"POST",body:e,headers:{...(r==null?void 0:r.headers)||{}}})}}const w=new y;export{w as a,l as b,m as e,c as g,d as r};
